[
  {
    "title": "Utiliser les notations CSS abrégées",
    "Identifiants": {
      "GreenIT": "15",
      "V2": "29",
      "V3": "26",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "3. Réalisation (fabrication / développement)",
      "Tiers": "Réseau",
      "Responsable": "Architecte Logiciel/Développeur"
    },
    "Indications": {
      "Degré de priorité": "2",
      "Mise en oeuvre": "3",
      "Impact écologique": "2",
      "Ressources Economisées": "Réseau"
    },
    "Description": "Utiliser les notations CSS abrégées pour réduire le poids de la feuille de styles.",
    "Exemple": "Ne pas écrire :\n\n```\nmargin-top:1em; margin-right:0; margin-bottom:2em; margin-left:0.5em;\n```\n\nmais plutôt :\n\n```\nmargin:1em 0 2em 0.5em;\n```\n\nPour aller plus loin :\n\n['https://www.w3.org/TR/CSS', 'https://www.456bereastreet.com/archive/200502/efficient_css_with_shorthand_properties/']",
    "Principe de validation": {
      "Le nombre ...": "de notations CSS non abrégés",
      "est inférieur ou égal à": "0%"
    },
    "source": "cnumr"
  },
  {
    "title": "Utiliser des serveurs virtualisés",
    "Identifiants": {
      "GreenIT": "70",
      "V2": "87",
      "V3": "89",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "4. Production",
      "Tiers": "Datacenter",
      "Responsable": "Administrateur systèmes"
    },
    "Indications": {
      "Degré de priorité": "3",
      "Mise en oeuvre": "3",
      "Impact écologique": "3",
      "Ressources Economisées": "Processeur / Mémoire vive"
    },
    "Description": "La virtualisation est une technologie permettant de créer et d’exécuter des représentations virtuelles d’un ordinateur sur une ou plusieurs machines physiques. Le logiciel en charge de la virtualisation se charge d'allouer les ressources entre les différents environnements virtuels en fonction de leurs besoins.\n\nEn conséquence, la virtualisation permet :\n\n['une économie sur le matériel par mutualisation', 'une utilisation optimale des ressources (RAM, CPU, disque)']\n\nCette démarche réduit la quantité de déchets électroniques (DEEE) et la consommation électrique comparé à l'utilisation de plusieurs serveurs physiques.\n\nLa conteneurisation est le compagnon à la virtualisation : une machine virtuelle peut accueillir un service de conteneurisation. Il va permettre d'executer de manière isolé plusieurs applications sur le même système d'exploitation.",
    "Exemple": "Utiliser des outils de virtualisation tels que VMware, Xen, KVM, etc.\n\nUtiliser des outils de conteneurisation tels que Docker, Kubernetes, etc.\n\nAu lieu d’utiliser quatre serveurs dédiés pour quatre projets, et de les charger au maximum à 20 % de leur capacité, mutualiser les ressources en mettant en place un hyperviseur. En effet, une seule machine physique pourra offrir les mêmes services que les quatre serveurs dédiés. ",
    "Principe de validation": {
      "Le nombre ...": "d'applications non hébergées de façon mutualisée",
      "est inférieur ou égal à": "0"
    },
    "source": "cnumr"
  },
  {
    "title": "Découper les CSS",
    "Identifiants": {
      "GreenIT": "9",
      "V2": "24",
      "V3": "21",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "3. Réalisation (fabrication / développement)",
      "Tiers": "Réseau",
      "Responsable": "UX/UI Designer"
    },
    "Indications": {
      "Degré de priorité": "4",
      "Mise en oeuvre": "4",
      "Impact écologique": "4",
      "Ressources Economisées": "Processeur / Réseau"
    },
    "Description": "Employer un ensemble de CSS plutôt qu’une seule, et appeler uniquement les CSS utiles en fonction du contexte. \nCette méthode permet de limiter le poids de la page lors du premier téléchargement, donc d’économiser de la bande passante \net de réduire la charge CPU.",
    "Exemple": "Découper les CSS en fonction de la logique fonctionnelle :\n\n['layout ;', 'content ;', 'module x ;', 'module y ;', 'etc...']\n\nDans le cas d’un site fonctionnellement riche, cela permettra d’exclure toutes les CSS des modules non utilisés. \nLe nombre de CSS doit rester raisonnable, plus pour des questions de maintenabilité que de performance, \ndans la mesure où les CSS générales (« layout » et « content » dans notre exemple) seront concaténées en un seul fichier. \nLes CSS complémentaires (ici, « module x » et « module y ») seront téléchargées en fonction du contexte (page, fonctionnalités...).",
    "Principe de validation": {
      "Le nombre ...": "de librairies CSS est supérieur ou égal",
      "est inférieur ou égal à": "2"
    },
    "source": "cnumr"
  },
  {
    "title": "Favoriser HSTS Preload list aux redirections 301",
    "Identifiants": {
      "GreenIT": "1060",
      "V2": "",
      "V3": "84",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "4. Production",
      "Tiers": "Réseau",
      "Responsable": "Administrateur systèmes"
    },
    "Indications": {
      "Degré de priorité": "4",
      "Mise en oeuvre": "3",
      "Impact écologique": "4",
      "Ressources Economisées": "Réseau / Requêtes"
    },
    "Description": "Le HSTS permet d’indiquer à n’importe quel navigateur, via un header de réponse HTTP gardé en cache que le domaine doit exclusivement être contacté en HTTPS.\n\nCela permet aux requêtes suivantes, émises sur le même domaine, d’être exclusivement contactées avec le protocole HTTPS, ce qui évite une multitude de redirections 301.\nNéanmoins, le premier appel exige une réponse (potentiellement non sécurisé) HTTP avec un header STS (Strict-Transport-Security).\nPour pallier ce problème, et obliger les navigateurs à contacter l’intégralité du domaine en HTTPS, il est possible, en plus d’activer le HSTS, de s’enregistrer dans une liste statique mise à jour sur tous les navigateurs récents : https://hstspreload.org.\n\nIl est important de noter que l’enregistrement de son domaine sur htstpreload.org est rapide et concerne l’intégralité du domaine, (sous-domaines inclus). Avant d’effectuer cet enregistrement, qui est relativement lent à supprimer, veillez qu’aucun de vos sous-domaines ne soient perturbés par la mise en place du HTTPS",
    "Exemple": "Exemple de configuration\n\n```\nStrict-Transport-Security : max-age = 63072000 ; includeSubDomains ; preload\n```",
    "Principe de validation": {
      "Le nombre ...": "de non activation de HSTS",
      "est inférieur ou égal à": "0"
    },
    "source": "cnumr"
  },
  {
    "title": "Ne se connecter à une base de données que si nécessaire",
    "Identifiants": {
      "GreenIT": "56",
      "V2": "72",
      "V3": "73",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "2. Conception",
      "Tiers": "Datacenter",
      "Responsable": "Architecte Logiciel/Développeur"
    },
    "Indications": {
      "Degré de priorité": "3",
      "Mise en oeuvre": "3",
      "Impact écologique": "3",
      "Ressources Economisées": "Processeur / Mémoire vive / Réseau"
    },
    "Description": "Quelque soit le système de base de données, l’ouverture d’une connexion est un processus coûteux en ressources pour le client et le serveur :\n\n['Allocation de mémoire et I/O disque pour les buffers,', 'Aller-retours réseaux pour le protocole de connexion,', 'Coût CPU induit.']\n\nExemple :  pour Oracle, plusieurs aller-retours sont nécessaires (validation des credentials, information sur le driver, négociation de la taille des paquets optimale, ...).\nLe fait d’ouvrir et de fermer une connexion nécessite l’allocation et la désallocation de ces ressources ainsi que de nombreux échanges réseaux, à chaque fois.\n\nLa bonne pratique qui est usuellement utilisée est la mise en place d’un pool de connexions.\nIl permet d’optimiser la gestion des connexions ainsi que les performances. Cependant, sa configuration n’est pas forcément une opération triviale (nécessite de superviser le comportement de celui-ci pour trouver le bon paramétrage).\n\nCeci dit, chaque fois que l’application peut éviter un accès à la base de données, faites-le !",
    "Exemple": "HikariCP est un pool de connexions JDBC solide et performant. Il est intégré dans SpringBoot.\n\nDans les cas où il n'y a pas de pool de connexion, réutiliser une connexion et ne pas ouvrir/fermer une nouvelle connexion à chaque requête.",
    "Principe de validation": {
      "Le nombre ...": "de connexions à une base de données pour requêter, stocker une donnée non nécessaire à l'utilisation du service",
      "est inférieur ou égal à": "0"
    },
    "source": "cnumr"
  },
  {
    "title": "Préférer les CSS aux images",
    "Identifiants": {
      "GreenIT": "11",
      "V2": "26",
      "V3": "23",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "3. Réalisation (fabrication / développement)",
      "Tiers": "Réseau",
      "Responsable": "Architecte Logiciel/Développeur"
    },
    "Indications": {
      "Degré de priorité": "4",
      "Mise en oeuvre": "3",
      "Impact écologique": "4",
      "Ressources Economisées": "Réseau / Requêtes"
    },
    "Description": "Utiliser les propriétés CSS à la place d’images. En effet, le poids d’une feuille de styles est bien plus faible, \nsurtout si elle est compressée. En outre, l’appel d’une feuille de styles ne génère qu’une seule requête HTTP, \ncontre un grand nombre si l’on emploie beaucoup d’images\n(une requête HTTP pour chaque image).",
    "Exemple": "Les coins arrondis des cases doivent être gérés en CSS plutôt qu’avec des images.\n\nPréférer l’écriture :\n\n```\n#cadre {\n    border-radius: 10px;\n}\n```\n\n```\n<div id=\"cadre\">\n    <p>\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n    </p>\n</div>\n```",
    "Principe de validation": {
      "Le nombre ...": "d'images qui auraient pu être remplacées par des CSS",
      "est inférieur ou égal à": "0"
    },
    "source": "cnumr"
  },
  {
    "title": "Éviter les animations JavaScript / CSS",
    "Identifiants": {
      "GreenIT": "810",
      "V2": "48",
      "V3": "39",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "2. Conception",
      "Tiers": "Utilisateur/Terminal",
      "Responsable": "UX/UI Designer"
    },
    "Indications": {
      "Degré de priorité": "4",
      "Mise en oeuvre": "3",
      "Impact écologique": "5",
      "Ressources Economisées": "Processeur / Mémoire vive"
    },
    "Description": "Les animations JavaScript/CSS peuvent être très coûteuses en termes de cycles CPU et de consommation mémoire. \nElles déclenchent toutes une action de type (re)paint/(re)ﬂow très coûteuse en ressources. Il faut donc éviter au maximum les animations, et ne les utiliser que lorsqu’elles sont indispensables.\n\nSi vous ne pouvez pas vous passer d’une animation, limitez-vous aux propriétés CSS `opacity` et `transform`, et aux fonctions associées `translate`, `rotate`, `scale` de `transform`. Ces deux propriétés sont automatiquement optimisées par le navigateur, et l’animation peut être prise en charge par le processeur graphique (GPU). Le site [www.csstriggers.com](https://csstriggers.com/) liste les actions sur le DOM déclenchées par une animation.\n\nPour que le navigateur puisse réduire au minimum les ressources consommées par l’animation, vous pouvez le prévenir qu’une animation va avoir lieu grâce à l'instruction `will-change`.\n\nPour en savoir plus :\nhttps://web.dev/animations-guide/",
    "Exemple": "```\n.box {\n    will-change: transform, opacity;\n}\n```",
    "Solution alternative": "Vous pouvez aussi laissez le choix à vos utilisateurs, via les préférences de leurs navigateurs et la media query `prefers-reduced-motion`, de jouer ou non l'animation. L'animation est jouée seulement si l'utilisateur n'a pas défini de préférence.\n\n```\n@media (prefers-reduced-motion : no-preference ) {\n  .animation {\n    animation: fadeIn 4s ease;\n  }\n}\n```",
    "Principe de validation": {
      "Le nombre ...": "d'animations JS / CSS par page",
      "est inférieur ou égal à": "2"
    },
    "source": "cnumr"
  },
  {
    "title": "Privilégier HTTP/2 à HTTP/1",
    "Identifiants": {
      "GreenIT": "",
      "V2": "",
      "V3": "",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "4. Production",
      "Tiers": "Réseau",
      "Responsable": "Administrateur systèmes"
    },
    "Indications": {
      "Degré de priorité": "4",
      "Mise en oeuvre": "4",
      "Impact écologique": "4",
      "Ressources Economisées": "Réseau"
    },
    "Description": "Le protocole HTTP/2 a troqué la représentation textuelle des requêtes et réponses pour une représentation binaire avec un mécanisme de compression des entêtes HTTP (HPACK).\nIl permet aussi le multiplexage des échanges, permettant de n'utiliser qu'une seule connexion TCP (et donc un seul _handshake_ TLS) avec le serveur, et ainsi tirer le meilleur avantage de HPACK.\n\nPour aller encore plus loin, si un autre nom de domaine résout vers la même adresse IP et est compatible avec le certificat TLS, la connexion TCP pourra être réutilisée également, ce qui permet d'utiliser un nom de domaine distinct sans cookie pour les ressources statiques (cf. la [bonne pratique “Héberger les ressources (CSS/JS) sur un domaine sans cookie”](/chapters/BP_094_fr.md)) sans autre surcoût que la résolution DNS.\nUne extension de HTTP/2 permet même d'économiser cette résolution pour les navigateurs la supportant et à condition que le serveur l'utilise.",
    "Exemple": "Fin 2016, Cloudflare a pu mesurer des gains en bande passante, comparé à HTTP/1, de plus de 50% sur les requêtes et de 1% à 15% sur les réponses, en fonction de la nature des échanges (peu de gros fichiers vs beaucoup de petites requêtes).",
    "Sources": [
      "[Analyse par Cloudflare des gains de HTTP/2](https://blog.cloudflare.com/hpack-the-silent-killer-feature-of-http-2/)",
      "[Expérimentation par Cloudflare sur la réutilisation de connexion entre plusieurs domaines](https://blog.cloudflare.com/connection-coalescing-experiments/)",
      "[The ORIGIN HTTP/2 Frame](https://httpwg.org/specs/rfc8336.html)"
    ],
    "Principe de validation": {
      "Le nombre ...": "de requêtes utilisant HTTP/1",
      "est inférieur ou égal à": "0"
    },
    "source": "cnumr"
  },
  {
    "title": "Désactiver les logs binaires",
    "Identifiants": {
      "GreenIT": "83",
      "V2": "93",
      "V3": "106",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "6. Support / maintenance",
      "Tiers": "Datacenter",
      "Responsable": "Administrateur systèmes"
    },
    "Indications": {
      "Degré de priorité": "2",
      "Mise en oeuvre": "2",
      "Impact écologique": "2",
      "Ressources Economisées": "Processeur / Mémoire vive / Stockage"
    },
    "Description": "Les logs binaires du serveur MySQL ou MariaDB peuvent devenir très volumineux, consommant des cycles CPU tout en générant des entrées-sorties (I/O) sur le disque dur, puisque chaque requête de modification/suppression est inscrite dans le fichier de log. Aussi, si vous avez la possibilité de désactiver ces logs, vous économiserez beaucoup de ressources.\nAvant de désactiver, il faut s'assurer qu'une réplication de la base de données n'est pas nécessaire et que la perte des données depuis le dernier backup est acceptable.",
    "Exemple": "Pour MySQL, ajouter la configuration suivante :\n\n```\nskip-log-bin\n```",
    "Principe de validation": {
      "Le nombre ...": "d'options --skip-log-bin et --disable-log-bin non activées dans le cas où les logs binaires ne sont pas utiles",
      "est inférieur ou égal à": "0"
    },
    "source": "cnumr"
  },
  {
    "title": "Favoriser un design simple, épuré, adapté au web",
    "Identifiants": {
      "GreenIT": "5",
      "V2": "6",
      "V3": "5",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "2. Conception",
      "Tiers": "Utilisateur/Terminal",
      "Responsable": "UX/UI Designer"
    },
    "Indications": {
      "Degré de priorité": "4",
      "Mise en oeuvre": "3",
      "Impact écologique": "4",
      "Ressources Economisées": "Processeur / Mémoire vive / Réseau"
    },
    "Description": "Tout design d'interface ou webdesign doit être réfléchi en amont, en prenant en compte :\n\n['les besoins de l\\'utilisateur (voir la bonne pratique \"Optimiser le parcours utilisateur\")', \"les heuristiques d'ergonomie (Bastien et Scapin, Nielsen, etc.)\", 'les contraintes techniques', \"les bonnes pratiques d'écoconception\", \"et de préférence les bonnes pratiques d'accessibilité\"]\n\n**Privilégiez un design simple et épuré réalisable uniquement en HTML et CSS.**",
    "Exemple": "**Description :** Certains sites contiennent des images encadrées, non contrastées et non lisibles (RGAA) et créent une surcharge mentale non nécessaire (2.2. Densité Informationnelle de Scapin et Bastien). Téléchargées, elles ne sont pourtant pas visibles sur mobile (écoconception). On peut parfois soulever l'incohérence entre signalétique et colorimétrie (1.2.2. Groupement/Distinction par le Format de Scapin et Bastien).\n\n**Recommandation :** Supprimer les images de fond et ajouter un glyphe (Préférer les glyphes aux images, bonne pratique d'écoconception) avec une colorimétrie cohérente si un groupement doit avoir lieu.",
    "Principe de validation": {
      "Le nombre ...": "de pages dont le design est plus chargé que nécessaire",
      "est inférieur ou égal à": "0"
    },
    "source": "cnumr"
  },
  {
    "title": "Utiliser un cache HTTP",
    "Identifiants": {
      "GreenIT": "72",
      "V2": "103",
      "V3": "99",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "4. Production",
      "Tiers": "Réseau",
      "Responsable": "Administrateur systèmes"
    },
    "Indications": {
      "Degré de priorité": "4",
      "Mise en oeuvre": "3",
      "Impact écologique": "5",
      "Ressources Economisées": "Processeur / Mémoire vive"
    },
    "Description": "Les reverse proxies (Varnish, Squid ou NGINX) sont optimisés pour servir du contenu (pages HTML, images, etc.) de façon rapide, tout en consommant le moins de cycles CPU possible. En évitant de solliciter inutilement le serveur d’applications, ils permettent d’utiliser une infrastructure plus réduite.",
    "Exemple": "Le recours à un reverse proxy spécialisé comme Varnish réduit drastiquement le temps nécessaire pour servir les pages dynamiques, tout en augmentant la capacité du CMS (Drupal, ici)\nà en délivrer un grand nombre en même temps. On constate également qu’un cache généraliste comme APC n’est pas adapté (source : Asymptotix).",
    "Principe de validation": {
      "Le nombre ...": "d'entêtes sans cache HTTP identifié",
      "est inférieur ou égal à": "0"
    },
    "source": "cnumr"
  },
  {
    "title": "Limiter le nombre de domaines servant les ressources",
    "Identifiants": {
      "GreenIT": "170",
      "V2": "55",
      "V3": "18",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "4. Production",
      "Tiers": "Réseau",
      "Responsable": "Architecte Logiciel/Développeur"
    },
    "Indications": {
      "Degré de priorité": "3",
      "Mise en oeuvre": "3",
      "Impact écologique": "4",
      "Ressources Economisées": "Requêtes"
    },
    "Description": "Lorsqu’un site web ou un service en ligne héberge les composants d’une page web sur plusieurs domaines, \nle navigateur doit établir une connexion HTTP avec chacun de ces domaines. Une fois la page HTML récupérée, \nle navigateur appelle les ressources au fur et à mesure qu’il parcourt le DOM (Document Object Model). \nCertaines ressources sont indispensables au fonctionnement de la page. Si elles sont hébergées sur un autre domaine peu réactif,\ncela peut rallonger le délai d’attente avant que la page soit opérationnelle. Dans la mesure du possible, il faut donc regrouper toutes les ressources sur un seul domaine.\n\nSeule exception à cette règle, le fait d’héberger les ressources statiques (feuilles de styles, images, etc.) sur un domaine séparé,\npour éviter d’avoir à transporter un ou plusieurs cookies à chaque GET HTTP du navigateur. On réduit le temps de réponse ainsi que la bande passante consommée inutilement.",
    "Exemple": "Pour un site web institutionnel à fort trafic, on privilégiera deux sous-domaines :\n\n['le serveur applicatif sur www.domain.tld ;', 'le serveur media « cookie-less » sur media.domain.tld.']\n\nOn limite ainsi le nombre de domaines tout en évitant de transporter inutilement un cookie à chaque GET HTTP sur une ressource statique",
    "Principe de validation": {
      "Le nombre ...": "Le nombre de domaines servant les ressources",
      "est inférieur ou égal à": "5"
    },
    "source": "cnumr"
  },
  {
    "title": "Utiliser le chargement paresseux",
    "Identifiants": {
      "GreenIT": "1010",
      "V2": "",
      "V3": "37",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "3. Réalisation (fabrication / développement)",
      "Tiers": "Réseau",
      "Responsable": "UX/UI Designer"
    },
    "Indications": {
      "Degré de priorité": "4",
      "Mise en oeuvre": "4",
      "Impact écologique": "5",
      "Ressources Economisées": "Processeur / Réseau"
    },
    "Description": "Lorsqu’un internaute ne consulte pas la totalité d’une page web, par défaut toutes les ressources (images, vidéos, iframes...)\nsituées en dehors de la zone visitée, en dessous de la ligne de flottaison, sont chargées inutilement. Pour éviter cela, \nil est possible d'utiliser la technique du chargement paresseux (lazy loading) qui consiste à ne charger un élement que\nlorsque son emplacement devient visible à l’écran. \n\nIl est possible, en HTML, d'ajouter un attribut `loading` à vos images et à vos iframes pour que le navigateur s'occupe\nde ne télécharger que les images qui apparaissent à l'écran. Cependant, cet attribut est très récent : il ne sera\npas pris en compte sur d'anciennes versions de navigateurs. Dans un souci de compatibilité accrue, on pourra néanmoins\nutiliser des mini-librairies Javascript, très légères, qui s'occuperont de lazy-loader vos images comme : \n- [LOZAD](https://cdn.jsdelivr.net/npm/lozad) 1,9 Ko (gzip)\n- [Vanilla-lazyload](https://cdn.jsdelivr.net/npm/vanilla-lazyload/dist/lazyload.min.js) 3,5 Ko (gzip)",
    "Exemple": "Dans cet exemple, l'image et l'iframe seront lazy-loadés automatiquement par le navigateur, si l'image doit apparaitre à\nl'écran, elle sera téléchargée et affichée, si elle est en dessous de la ligne de flottaison, elle ne sera pas téléchargée.\n\n```\n<img src=\"image.jpg\" alt=\"...\" loading=\"lazy\">\n<iframe src=\"video-player.html\" title=\"...\" loading=\"lazy\"></iframe>\n```\n\nPour aller plus loin :\n\n['https://developer.mozilla.org/en-US/docs/Web/Performance/Lazy_loading', 'https://web.dev/browser-level-image-lazy-loading/', 'https://web.dev/lazy-loading-video/']",
    "Principe de validation": {
      "Le nombre ...": "d'images, d'iframes et de vidéos appelés sans lazy loading, en dessous de la ligne de flottaison",
      "est inférieur ou égal à": "0%"
    },
    "source": "cnumr"
  },
  {
    "title": "Utiliser la version la plus récente du langage",
    "Identifiants": {
      "GreenIT": "",
      "V2": "",
      "V3": "",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "2. Conception",
      "Tiers": "Datacenter",
      "Responsable": "Architecte Logiciel/Développeur"
    },
    "Indications": {
      "Degré de priorité": "3",
      "Mise en oeuvre": "3",
      "Impact écologique": "3",
      "Ressources Economisées": "Processeur / Mémoire vive"
    },
    "Description": "Les différents langages côté serveurs (PHP, Ruby, Java, ...) sont régulièrement améliorés par les différentes communautés.\nChaque nouvelle version a régulièrement apporté son lot de gain en termes de performances, de gestion mémoire, de stabilité et comble des failles de sécurité. \nIl est donc conseillé en règle générale d'utiliser la version la plus récente du langage pour bénéficier de ses apports.",
    "Exemple": "Les versions 7 et 8 de PHP ont apporté un gros gain de performance. \nDe plus, avec le JIT (Compilation Just in Time), PHP 8.0 peut compiler des parties du code et le stocker en mémoire. \nEn plus d'améliorer les performances, le JIT optimise la gestion mémoire.",
    "Principe de validation": {
      "Le nombre ...": "de versions majeures de retard sur la dernière version stable du langage",
      "est inférieur ou égal à": "1"
    },
    "source": "cnumr"
  },
  {
    "title": "Stocker les données statiques localement",
    "Identifiants": {
      "GreenIT": "205",
      "V2": "10",
      "V3": "10",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "3. Réalisation (fabrication / développement)",
      "Tiers": "Datacenter",
      "Responsable": "Architecte Logiciel/Développeur"
    },
    "Indications": {
      "Degré de priorité": "4",
      "Mise en oeuvre": "3",
      "Impact écologique": "4",
      "Ressources Economisées": "Réseau / Requêtes"
    },
    "Description": "Avec le support désormais généralisé sur tous les navigateurs des bases de données clé-valeur (IndexDB, Web Storage), et de la mise en cache dans le Cache Storage API, il est possible de stocker localement des données structurées statiques.\n\nL’intérêt du stockage local est double. D’une part, on évite les allers-retours inutiles avec le serveur, ce qui économise des ressources et du temps de réponse.\nD’autre part, comme les données sont locales, il est plus facile et plus rapide de les manipuler au sein de l’interface.\n\nLe gain potentiel est la réduction de la charge serveur, donc du nombre d’équipements nécessaires (de leur empreinte environnementale et économique),\ndes serveurs HTTP jusqu’aux serveurs de base données.",
    "Principe de validation": {
      "Le nombre ...": "de données statiques non stockées localement",
      "est inférieur ou égal à": "25%"
    },
    "source": "cnumr"
  },
  {
    "title": "Mettre en cache les données calculées souvent utilisées",
    "Identifiants": {
      "GreenIT": "47",
      "V2": "62",
      "V3": "64",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "2. Conception",
      "Tiers": "Réseau",
      "Responsable": "Architecte Logiciel/Développeur"
    },
    "Indications": {
      "Degré de priorité": "4",
      "Mise en oeuvre": "3",
      "Impact écologique": "4",
      "Ressources Economisées": "Processeur / Mémoire vive"
    },
    "Description": "Lorsque des calculs de valeurs ou de données sont coûteux en ressources, les mettre en cache si les valeurs demeurent inchangées, afin de ne pas réitérer ces opérations.\nLes systèmes de cache de type key-value store sont prévus pour stocker ces données. Généralement montés entièrement en mémoire vive (RAM), ils génèrent d’importantes économies de cycles CPU si les données calculées sont très souvent sollicitées.",
    "Exemple": "Le nombre de contenus (ex: des produits) appartenant à une catégorie est calculé alors qu'il n'est pas mis à jour de manière très fréquente. Mettre en cache pour chaque catégorie leur nombre de contenus permet de gagner du cycle CPU.\n\nLes jetons d'accès en OAuth2 sont associés à une date d'expiration. Mettre en cache le jeton et son délai d'expiration évite des appels inutiles au serveur d'autorisation et de revalider le jeton.",
    "Principe de validation": {
      "Le nombre ...": "de données peu volatiles, demandant un calcul et accédées plusieurs fois, non mises dans un système de cache",
      "est inférieur ou égal à": "0"
    },
    "source": "cnumr"
  },
  {
    "title": "Désactiver le DNS lookup d’Apache",
    "Identifiants": {
      "GreenIT": "84",
      "V2": "100",
      "V3": "104",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "4. Production",
      "Tiers": "Datacenter",
      "Responsable": "Administrateur systèmes"
    },
    "Indications": {
      "Degré de priorité": "2",
      "Mise en oeuvre": "2",
      "Impact écologique": "3",
      "Ressources Economisées": "Processeur / Réseau"
    },
    "Description": "À chaque fois qu’un serveur web reçoit une requête HTTP, il enregistre cette information dans un log, en traduisant généralement l’adresse IP de l’internaute en nom de domaine. Cette conversion (DNS Lookup) constitue l’un des goulots d’étranglement du serveur HTTP Apache.\n\nÀ désactiver donc.",
    "Exemple": "Dans le fichier de configuration de votre serveur Apache, situé à l’adresse `/etc/apache/httpd.conf` ou à l’adresse `/etc/apache2/apache2.conf`, écrire :\n\n```\n HostnameLookups Off\n```",
    "Principe de validation": {
      "Le nombre ...": "de DNS lookup actif",
      "est inférieur ou égal à": "0"
    },
    "source": "cnumr"
  },
  {
    "title": "Préférer les glyphs aux images",
    "Identifiants": {
      "GreenIT": "20",
      "V2": "18",
      "V3": "30",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "3. Réalisation (fabrication / développement)",
      "Tiers": "Réseau",
      "Responsable": "UX/UI Designer"
    },
    "Indications": {
      "Degré de priorité": "4",
      "Mise en oeuvre": "3",
      "Impact écologique": "4",
      "Ressources Economisées": "Stockage / Réseau / Requêtes"
    },
    "Description": "Les glyphes sont des caractères typographiques spécifiques, inclus dans les polices de caractères comme celles d'un système d'exploitation, utilisables en remplacement d'images monochromes telles que des symboles ou pictogrammes (chevron, triangle, point, carré, signes astrologiques, etc.) jusqu'aux illustrations permettant :\n\n['de réduire la bande passante en économisant sur le poids', 'de réduire le nombre de requêtes', 'de réduire la complexité du DOM, notamment avec de nombreux pictogrammes SVG']",
    "Exemple": "Pour optimiser une landing page comprenant visuellement :\n\n![Exemple de police créée via Font Forge pour illustrer une landing page](https://github.com/florinesueur/images/blob/main/vue-font-forge.svg)\n*Extrait d'une police créée via Font Forge*\n\nUn gain de 91% du poids a été réalisé en incluant pictogrammes et illustrations vectorielles dans une icon font via [Font Forge](https://fontforge.org/en-US/).\n\nPour aller plus loin : [https://coding.smashingmagazine.com/2011/03/19/styling-elements-with-glyphs-sprites-and-pseudo-elements](https://coding.smashingmagazine.com/2011/03/19/styling-elements-with-glyphs-sprites-and-pseudo-elements)",
    "Principe de validation": {
      "Le nombre ...": "d'images qui auraient pu être remplacées par un glyphe (symbole de police de caractère)",
      "est inférieur ou égal à": "0"
    },
    "source": "cnumr"
  },
  {
    "title": "Quantifier précisément le besoin",
    "Identifiants": {
      "GreenIT": "110",
      "V2": "2",
      "V3": "2",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "1. Spécification",
      "Tiers": "Utilisateur/Terminal",
      "Responsable": "PO/AMOA"
    },
    "Indications": {
      "Degré de priorité": "5",
      "Mise en oeuvre": "4",
      "Impact écologique": "5",
      "Ressources Economisées": "Processeur / Mémoire vive / Stockage / Réseau / Requêtes"
    },
    "Description": "Les « dimensions » de chaque fonctionnalité doivent être définies précisément et dans leur ensemble. Il peut s’agir \nd’un taux de compression pour les images de l’interface graphique, du temps de réponse maximum pour une requête HTTP, \ndu nombre d’items affichés dans une liste, etc.\n\nPlus les « dimensions » et exigences associées à chaque fonctionnalité collent au métier, plus on évite la surqualité.\nLa logique doit donc être inversée par rapport aux habitudes actuelles. Si une information n’est pas précisée, \nc’est le niveau de qualité ou la quantité minimale qui est proposé. Par exemple, en l’absence de précision, \nle nombre d’items d’une liste est limité à 5 éléments ou au nombre maximal affichable sur le plus petit écran cible de l’application.\n\nLes valeurs par défaut, rarement modifiées par l'utilisateur, doivent être choisies pour répondre au besoin avec un impact minimal.",
    "Exemple": "Gain potentiel : en jouant sur le nombre d’items affichés sur la page de résultats de son moteur de recherche Bing, \nMicrosoft Research a démontré qu’il était possible de réduire jusqu’à 80 % l’infrastructure physique (nombre de serveurs) sous-jacente.\n\nAutre exemple : en utilisant par défaut une résolution de vidéo acceptable (480p) plutôt que maximale, on réduit la bande passante \nutilisée pour la plupart des utilisateurs (qui ne changeront pas la valeur par défaut), tout en laissant la possibilité aux autres \nd'augmenter la résolution s'ils en en ont le besoin.",
    "Principe de validation": {
      "Le nombre ...": "de fonctionnalités avec des dimensions supérieures au besoin",
      "est égal à": "0"
    },
    "source": "cnumr"
  },
  {
    "title": "Mettre en place un plan de fin de vie du site",
    "Identifiants": {
      "GreenIT": "1030",
      "V2": "",
      "V3": "85",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "7. Fin de vie",
      "Tiers": "Datacenter",
      "Responsable": "PO/AMOA"
    },
    "Indications": {
      "Degré de priorité": "3",
      "Mise en oeuvre": "2",
      "Impact écologique": "3",
      "Ressources Economisées": "Processeur / Mémoire vive / Réseau / Requêtes / Stockage"
    },
    "Description": "La plupart des environnements (POC - proof of concept, tests, recette, …) finissent par tomber en désuétude et ne sont plus nécessaires. Environ 25 % des serveurs physiques et 20 % des serveurs virtuels (VM) sont des zombies. C’est-à-dire que des serveurs consomment en attendant qu’on les utilise. Ils constituent autant d’impacts environnementaux et économiques évitables.\n\nRéaliser une analyse de fin vie évite cette situation.\n\nUn plan de fin de vie simple consiste à nommer la personne qui décide de l’arrêt du service. Son rôle sera alors de monitorer son activité puis de l’arrêter. Une autre approche fixe le scénario de fin de vie (date de péremption…) et commissionne le budget adéquate dès la conception. Au lieu d’arrêter un service, une troisième piste consiste à allonger sa durée de vie.\n\nArrêter un service implique de \n\n['Libérer les ressources : décommissionner le service, ses dépendances, les outils utilisés par l’équipe de développement (ex : chanel Teams).', 'Supprimer, archiver… les données (y compris la GED et le système de suivi des bugs).', 'Réaffecter les installations, équipements et autres ressources du projet (y compris le code source).', 'Valoriser les compétences acquises pendant la vie du projet.']",
    "Exemple": "Lors d'une migration de données ou d'applications vers un environnement cloud, plusieurs scénarii de fin de vie sont possibles :\n\n[\"copier/coller l'existant vers le cloud avec décommissionnement de l'existant.\", \"refactoring avec une modification de l'architecture et du code et donc une remise en cause de l'existant : par exemple, un questionnement sur les fonctionnalités non utilisées et que l'on reprend au cas où…\"]",
    "Principe de validation": {
      "Le nombre ...": "de site sans plan de fin de vie",
      "est inférieur ou égal à": "0"
    },
    "source": "cnumr"
  },
  {
    "title": "S’appuyer sur les services managés",
    "Identifiants": {
      "GreenIT": "",
      "V2": "",
      "V3": "",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "4. Production",
      "Tiers": "Datacenter",
      "Responsable": "Administrateur systèmes"
    },
    "Indications": {
      "Degré de priorité": "2",
      "Mise en oeuvre": "3",
      "Impact écologique": "2",
      "Ressources Economisées": "Processeur / Mémoire vive / Stockage"
    },
    "Description": "Les plateformes cloud sont spécialisées dans la mise en place d'infrastructures résilientes, scallables, efficientes, sécurisées et mutualisées.\nElles proposent des services managés reposant sur ces infrastructures comme :\n\n['le stockage de contenus multimédias', 'la persistance de données via des bases de données de référence (ex: Postgresql)', 'la gestion de services de stockage et de flux de messages (ex: Kafka)', 'la gestion de conteneurs (ex: Kubernetes)']\n\nÀ moins d'avoir une forte expertise dans ses équipes, il est préférable d'utiliser ces services managés.\nÀ service équivalent, il sera généralement très difficile d’obtenir une meilleure efficience que ceux-ci.",
    "Principe de validation": {
      "Le nombre ...": "d'applications \"backend\" ne s'appuyant pas sur un service managé",
      "est inférieur ou égal à": "1"
    },
    "source": "cnumr"
  },
  {
    "title": "S'assurer que les parcours utilisateurs permettent de réaliser leur action prévue",
    "Identifiants": {
      "GreenIT": "",
      "V2": "",
      "V3": "",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "1. Spécification",
      "Tiers": "Utilisateur/Terminal",
      "Responsable": "UX/UI Designer"
    },
    "Indications": {
      "Degré de priorité": "4",
      "Mise en oeuvre": "4",
      "Impact écologique": "4",
      "Ressources Economisées": "Processeur / Mémoire vive / Stockage / Réseau / Requêtes"
    },
    "Description": "Des services web permettent de réaliser sans se déplacer des démarches administratives, des ouvertures de contrats, des déclarations de sinistres etc...\nBeaucoup de ces procédures peuvent être complexes à réaliser ou ne pas prendre en compte des cas particuliers.\nPour valider la connexion à un service bancaire en ligne par exemple, l'installation d'une application mobile et donc un smartphone peuvent être exigés.\nCertains utilisateurs peuvent donc se retrouver bloqués dans l'utilisation du service. \nLa mise en place d'une alternative plus \"low tech\" (appel téléphonique, SMS, point d'accueil physique) peut palier à cette situation.",
    "Exemple": "Lors d'une démarche administrative complexe comme la souscription d'un contrat d'assurance, mettre en place un numéro d'appel téléphonique afin d'aider les utilisateurs en cas de blocage.",
    "Principe de validation": {
      "Le nombre ...": "de parcours utilisateurs complexes sans alternative low tech",
      "est inférieur ou égal à": "0"
    },
    "source": "cnumr"
  },
  {
    "title": "Mettre en place une architecture élastique ",
    "Identifiants": {
      "GreenIT": "",
      "V2": "",
      "V3": "",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "2. Conception",
      "Tiers": "Datacenter",
      "Responsable": "Architecte Logiciel/Développeur"
    },
    "Indications": {
      "Degré de priorité": "3",
      "Mise en oeuvre": "3",
      "Impact écologique": "4",
      "Ressources Economisées": "Requêtes"
    },
    "Description": "Dans la plupart des cas la charge subie par une application n'est pas constante au cours du temps. Par exemple il peut\nn'y avoir que peu, voire pas du tout d'utilisateurs connectés la nuit. Dans ce cas, il n'est pas nécessaire d'utiliser \ndes infrastructures techniques aussi importantes aux heures creuses qu'aux heures de plus forte demande.\n\nGrâce à la mutualisation des déploiements (voir la bonne pratique #89 « Utiliser des serveurs virtualisés »), \nen particulier sur le cloud, il est possible de modifier dynamiquement et automatiquement\nla taille de l'infrastructure en fonction de la charge. Cette modification peut obéir à une programmation horaire (par\nexemple éteindre la nuit les applications utilisées uniquement aux heures de bureau) ou se faire en réaction au nombre\nde requêtes : si la charge augmente on ajoute de nouvelles machines virtuelles, de nouvelles instances de l'application \n(conteneurs, processus ou fonctions serverless, ...), que l'on décommissionne quand elle baisse.\n\nDes outils comme Docker permettent de créer des images de vos applications qui peuvent être facilement déployées ou \ndécommissionnées par des outils d'orchestration comme Kubernetes. Les fournisseurs de Cloud proposent en général des\nservices permettant de tirer profit de ces outils.\n\nLes environnements de tests et d'expérimentation en particulier peuvent être éteints la nuit et les jours non ouvrés très facilement.\n\nMettre en place une architecture élastique permet de plus de faire des économies, puisque moins de ressources serveurs \nsont utilisées, et que celles-ci sont facturées. \n\nUne architecture élastique a un coût de mise en place important en termes de charge de travail et de complexité accrue de\nla solution. Si votre application a peu de charge ou que celle-ci varie peu, il n'est pas indispensable de la mettre en place.",
    "Principe de validation": {
      "Le nombre ...": "de ressources réservées inutilement quand la charge est faible",
      "est de": "0"
    },
    "source": "cnumr"
  },
  {
    "title": "Préférer une PWA à une application mobile native similaire au site web",
    "Identifiants": {
      "GreenIT": "",
      "V2": "",
      "V3": "",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "2. Conception",
      "Tiers": "Utilisateur/Terminal",
      "Responsable": "Architecte Logiciel/Développeur"
    },
    "Indications": {
      "Degré de priorité": "3",
      "Mise en oeuvre": "3",
      "Impact écologique": "3",
      "Ressources Economisées": "Stockage / Réseau"
    },
    "Description": "Lors de la conception d'un service numérique, il est indispensable de définir les supports nécessaires en fonction des utilisateurs.\nUn site internet responsive peut-être tout à fait suffisant et satisfaisant.\n\nCependant si une application mobile est strictement nécessaire et qu'elle reprend entièrement ou en partie le site internet, alors une PWA (Progressive Web App) est une solution évitant des doubles, voire des triples développements et maintenances qu'occasionnerait le développement d'une application mobile native ou hybride (React native, Flutter).\n\nLa PWA n'étant pas liée à un système d'exploitation (OS) et souvent plus légère qu'une application mobile native, permet de réduire le risque d'obsolescence du terminal mobile et une utilisation moindre de la bande passante. C'est ainsi que plusieurs réseaux sociaux ont développé une PWA pour conquérir des marchés avec des réseaux avec de faibles débits.",
    "Exemple": [
      "Des sites e-commerce (Lancôme, Starbucks, etc.)",
      "Des médias (L'équipe, Courrier International, Forbes, etc.)",
      "Des Software as a Service (Microsoft 365, Gmail, etc.)",
      "Des réseaux sociaux (Twitter Lite, Telegram, etc.)",
      "Des applications métiers (SNCF, etc.)"
    ],
    "Principe de validation": {
      "Le nombre ...": "d'applications qui auraient pu être des PWA",
      "est inférieur ou égal à": "0"
    },
    "source": "cnumr"
  },
  {
    "title": "Favoriser le \"Request collapsing\"",
    "Identifiants": {
      "GreenIT": "",
      "V2": "",
      "V3": "",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "2. Conception",
      "Tiers": "Datacenter",
      "Responsable": "Architecte Logiciel/Développeur"
    },
    "Indications": {
      "Degré de priorité": "2",
      "Mise en oeuvre": "2",
      "Impact écologique": "2",
      "Ressources Economisées": "Réseau / Requêtes"
    },
    "Description": "Le \"Request collapsing\" est un pattern applicatif permettant de limiter le nombre d’appels distants en regroupant plusieurs requêtes pour n’en faire qu’une seule. \nIl est adapté dans le cas de la récupération via un service tiers de données appartenant au même domaine métier.\n\nIl permet de limiter:\n\n['la charge réseau,', 'l’impact d’une latence réseau élevée,', 'les coûts dans le cadre de licences à la requête.']",
    "Exemple": "La récupération d'une commande cliente dans son compte client nécessite les informations du produit commandé, l'adresse de facturation et l'état du paiement.\nAu lieu de solliciter à travers trois requêtes le service de gestion des commandes pour récupérer ces trois groupes de données, il est préférable que le service de gestion des commandes permette la récupération en un seul appel.",
    "Principe de validation": {
      "Le nombre ...": "de requêtes pour récupérer des données d'un même domaine métier par un service tiers",
      "est inférieur ou égal à": "2"
    },
    "source": "cnumr"
  },
  {
    "title": "Éviter d'effectuer des requêtes SQL à l’intérieur d’une boucle",
    "Identifiants": {
      "GreenIT": "55",
      "V2": "71",
      "V3": "72",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "3. Réalisation (fabrication / développement)",
      "Tiers": "Datacenter",
      "Responsable": "Architecte Logiciel/Développeur"
    },
    "Indications": {
      "Degré de priorité": "3",
      "Mise en oeuvre": "3",
      "Impact écologique": "3",
      "Ressources Economisées": "Processeur / Mémoire vive / Réseau"
    },
    "Description": "Les requêtes SQL à l’intérieur d’une boucle posent de gros problèmes de performance, et ce d’autant plus si le(s) serveur(s) SQL n’est (ne sont) pas sur la machine locale. En effet, ces serveurs sont optimisés pour traiter plusieurs sélections, insertions ou modifications dans une seule requête ou une seule transaction.\n\nMal utilisées, ces requêtes consomment inutilement des cycles CPU, de la mémoire vive et de la bande passante.",
    "Exemple": "Ne pas écrire :\n\n```\nforeach ($userList as $user) {\n    $query = 'INSERT INTO users (ﬁrst_name,last_name) VALUES(\"'. $user['ﬁrst_name'] .'\", \"'. $user['last_ name'] .'\")';\n    mysql_query($query);\n}\n```\n\nmais plutôt :\n\n```\n$userData = array();\nforeach ($userList as $user) {\n    $userData[] = '(\"'. $user['ﬁrst_name'] .'\", \"'.\n    $user['last_name'] .'\")';\n}\n$query = 'INSERT INTO users (ﬁrst_name,last_name) VALUES'. implode(',', $userData); mysql_query($query);\n```",
    "Principe de validation": {
      "Le nombre ...": "de requêtes SQL à l'intérieur d'une boucle",
      "est inférieur ou égal à": "0"
    },
    "source": "cnumr"
  },
  {
    "title": "Ajouter des entêtes Expires ou Cache-Control",
    "Identifiants": {
      "GreenIT": "78",
      "V2": "105",
      "V3": "101",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "4. Production",
      "Tiers": "Réseau",
      "Responsable": "Administrateur systèmes"
    },
    "Indications": {
      "Degré de priorité": "4",
      "Mise en oeuvre": "3",
      "Impact écologique": "4",
      "Ressources Economisées": "Processeur / Réseau / Mémoire vive / Requêtes"
    },
    "Description": "Les en-têtes Expires et Cache-Control définissent la durée pendant laquelle un navigateur doit conserver une ressource dans son cache. Il faut donc en prévoir et les configurer correctement pour les feuilles de style CSS, les scripts JavaScript et les images.\n\nIdéalement, la durée de vie de ces éléments doit être la plus longue possible, afin que le navigateur ne les redemande pas au serveur. On économise ainsi des requêtes HTTP, de la bande passante et des cycles CPU côté serveur.",
    "Exemple": "Voici un exemple de configuration des en-têtes Expires et Cache-Control pour le serveur web Apache :\n\n```\n# BEGIN Cache-Control Headers\n<IfModule mod_headers.c>\n    <FilesMatch \"\\\\.(ico|jpe?g|png|gif|swf|css|gz)$\">\n        Header set Cache-Control\"max-age=2592000, public\"\n    </FilesMatch>\n    <FilesMatch \"\\\\.(html|htm)$\">\n        Header set Cache-Control\"max-age=7200, public\"\n    </FilesMatch>\n</IfModule>\n# END Cache-Control Headers\n```",
    "Principe de validation": {
      "Le nombre ...": "d'entêtes manquantes Expires ou Cache-Control",
      "est inférieur ou égal à": "0"
    },
    "source": "cnumr"
  },
  {
    "title": "Éviter les redirections",
    "Identifiants": {
      "GreenIT": "45",
      "V2": "97",
      "V3": "95",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "6. Support / maintenance",
      "Tiers": "Réseau",
      "Responsable": "Architecte Logiciel/Développeur"
    },
    "Indications": {
      "Degré de priorité": "3",
      "Mise en oeuvre": "3",
      "Impact écologique": "4",
      "Ressources Economisées": "Processeur / Réseau / Stockage"
    },
    "Description": "Les redirections dégradent le temps de réponse, tout en consommant des ressources inutilement. Il faut donc les éviter autant que possible. Ces redirections peuvent avoir lieu à différents niveaux : code HTML, code JavaScript, serveur HTTP et serveur d’applications (PHP, etc.).",
    "Exemple": "Au niveau du serveur HTTP (Apache, dans ce cas), une redirection consiste à activer une réécriture systématique des URL via le fichier\n.htaccess :\n\n```\n<IfModule mod_alias.c>\n    Redirect permanent http://ancienne_adresse.fr http://nouvelle.adresse.fr/\n</IfModule>\n```\n\nMieux vaut remplacer manuellement les adresses statiques intégrées aux pages web",
    "Principe de validation": {
      "Le nombre ...": "de redirections",
      "est inférieur ou égal à": "1"
    },
    "source": "cnumr"
  },
  {
    "title": "Compresser les documents",
    "Identifiants": {
      "GreenIT": "97",
      "V2": "108",
      "V3": "107",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "5. Utilisation",
      "Tiers": "Utilisateur/Terminal",
      "Responsable": "Utilisateur"
    },
    "Indications": {
      "Degré de priorité": "3",
      "Mise en oeuvre": "2",
      "Impact écologique": "4",
      "Ressources Economisées": "Réseau / Stockage"
    },
    "Description": "Compresser tous les documents pouvant être téléchargés depuis une page web, sauf si la compression n’apporte pas un gain évident (par exemple, cas d’un PDF parfaitement optimisé pour le Web).",
    "Exemple": "Un document au format DOC pesant 7,8 Mo ne pèse plus que 5,5 Mo une fois compressé, soit un gain de 30 % (compression WinZip par défaut).\nTypes de fichiers bureautiques pouvant être compressés facilement :\n\n['documents issus d’un traitement de texte (.doc, .docx, .rtf, .txt, etc.) ;', 'documents issus d’un tableur (.xls, .xslx, etc.) ;', 'présentations (.ppt, .pptx, etc.) ;', 'documents PDF ; ', 'contenus multimédias (images, audio et vidéo).']",
    "Principe de validation": {
      "Le nombre ...": "de documents non compressés",
      "est inférieur ou égal à": "0"
    },
    "source": "cnumr"
  },
  {
    "title": "Adapter les vidéos aux contextes de visualisation",
    "Identifiants": {
      "GreenIT": "92",
      "V2": "115",
      "V3": "114",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "5. Utilisation",
      "Tiers": "Utilisateur/Terminal",
      "Responsable": "Utilisateur"
    },
    "Indications": {
      "Degré de priorité": "3",
      "Mise en oeuvre": "2",
      "Impact écologique": "3",
      "Ressources Economisées": "Processeur / Réseau"
    },
    "Description": "Prévoir plusieurs formats (taille, frame rate, compression audio, etc.) selon le contexte de lecture des vidéos (ordinateur de bureau, tablette Wi-Fi, smartphone EDGE. ).\n\nL’optimisation des vidéos doit être réalisée en dehors du site web, idéalement lors de la postproduction. Si ce n’est pas possible, utiliser des services comme Youtube ou Vimeo qui proposent, par défaut, plusieurs formats optimisés (SD, HD, etc.).",
    "Exemple": "Une aide utilisateur tournée en 1 680 × 1 050, d’une durée de 15 secondes, pèse :\n\n['49 Mo non optimisée ;', '3 Mo optimisée pour une résolution égale ou supérieure à 1 024 × 720 en MPEG 4 / H.264 / AAC ;', '1,2 Mo optimisée pour une résolution  égale  ou  supérieure  à 480 × 320 en MPEG 4 / H.264 / AAC.']\n\nOn peut donc estimer un gain d’au moins 50 % du poids (et probablement des gains lors du décodage, car le format d’encodage tient compte des matériels cibles) entre la version « desktop » et la version\n« mobile » de la vidéo.\n\nAvec 3 tailles différentes × 3 encodages différents, soit 9 versions d’une même vidéo, la plupart des cas devraient être couverts. Avec une logique de responsive design, il est possible de servir telle ou telle vidéo en fonction de règles simples telles que la résolution d’écran.",
    "Principe de validation": {
      "Le nombre ...": "de vidéos avec une définition de 1080p ou + affichées sur le site web quand le terminal détecté est un smartphone",
      "est inférieur ou égal à": "0"
    },
    "source": "cnumr"
  },
  {
    "title": "Limiter l'utilisation des GIFs animés",
    "Identifiants": {
      "GreenIT": "",
      "V2": "",
      "V3": "",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "5. Utilisation",
      "Tiers": "Utilisateur/Terminal",
      "Responsable": "Utilisateur"
    },
    "Indications": {
      "Degré de priorité": "3",
      "Mise en oeuvre": "3",
      "Impact écologique": "3",
      "Ressources Economisées": "Processeur / Mémoire vive / Stockage / Réseau"
    },
    "Description": "Le gif animé, format image animée datant de 1995, est plus lourd et plus lent que d'autres formats tels que les formats vidéo webm ou le mp4.\nLe webp animé est moindre dans son gain de poids et est actuellement peu supporté par les navigateurs.",
    "Exemple": "|   | .gif (animé)          | .webp (animé) |.webm | .mp4 | \n| :--------------- |---------------:| -----:| -----:| -----:|\n| Animation 1 | 90 Ko  | 74 Ko |   36 Ko       |  38 Ko |\n| Animation 2 | 5,45 Mo  |2,2 Mo | 274 Ko          |   266 Ko | \n\n```\n<!--  Autoplay, loop and muted video  -->\n<video autoplay loop muted playsinline>\n  <source src=\"my-animation.webm\" type=\"video/webm\">\n  <source src=\"my-animation.mp4\" type=\"video/mp4\">\n</video>\n```\n\nEn savoir plus :\n\n['[https://web.dev/replace-gifs-with-videos/](https://web.dev/replace-gifs-with-videos/)']",
    "Principe de validation": {
      "Le nombre ...": "de fichier gif animé",
      "est inférieur ou égal à": "0"
    },
    "source": "cnumr"
  },
  {
    "title": "Optimiser l'efficacité énergétique des serveurs",
    "Identifiants": {
      "GreenIT": "68",
      "V2": "88",
      "V3": "90",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "4. Production",
      "Tiers": "Datacenter",
      "Responsable": "Administrateur systèmes"
    },
    "Indications": {
      "Degré de priorité": "2",
      "Mise en oeuvre": "2",
      "Impact écologique": "3",
      "Ressources Economisées": "Consommation électrique"
    },
    "Description": "À service rendu identique, il est possible de réduire la consommation électrique des serveurs en choisissant des équipements peu énergivores.",
    "Exemple": "Lors de l’achat, privilégier des serveurs équipés d’une alimentation électrique conforme à l’écolabel 80Plus (niveaux Platinum et Titanium). Préférer également les serveurs estampillés Energy Star.\n\nIl est aussi possible de choisir une architecture matérielle adaptée au type d’application web. Par exemple, pour un site web à fort trafic, la physicalisation est mieux adaptée : elle consiste à utiliser n CPU très basse consommation, plutôt que n machines virtuelles s’exécutant sur un serveur physique dont le processeur (Xeon, etc.) est souvent énergivore.",
    "Principe de validation": {
      "Le nombre ...": "de serveurs sans une alimentation électrique certifiée 80Plus Platinium ou plus OU non écolabellisés ou Energy Star for server.",
      "est inférieur ou égal à": "0"
    },
    "source": "cnumr"
  },
  {
    "title": "Valider votre code avec un Linter",
    "Identifiants": {
      "GreenIT": "35",
      "V2": "33",
      "V3": "46",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "3. Réalisation (fabrication / développement)",
      "Tiers": "Utilisateur/Terminal",
      "Responsable": "Architecte Logiciel/Développeur"
    },
    "Indications": {
      "Degré de priorité": "3",
      "Mise en oeuvre": "3",
      "Impact écologique": "2",
      "Ressources Economisées": "Processeur"
    },
    "Description": "L’analyseur de qualité du code JSLint vérifie que la syntaxe JavaScript utilisée sera comprise par tous les navigateurs. \nLe code obtenu respecte ainsi des contraintes syntaxiques qui permettent aux interpréteurs d’exécuter le code plus facilement et donc plus rapidement. Le processeur est donc sollicité moins longtemps.\n\nDans des développements modernes, nous recommandons d'ajouter à vore process de livraison différents outils permettant \nd'assurer la qualité de votre code. ",
    "Exemple": "Nous pouvons par exemple utiliser: \n\n['[ESLint](https://eslint.org/) pour le code JavaScript', '[Stylelint](https://stylelint.io/) pour vs feuilles de styles']",
    "Principe de validation": {
      "Le nombre ...": "de lignes de code source non validées par des outils comme ESLint",
      "est inférieur ou égal à": "0"
    },
    "source": "cnumr"
  },
  {
    "title": "Favoriser les polices standards",
    "Identifiants": {
      "GreenIT": "19",
      "V2": "17",
      "V3": "29",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "3. Réalisation (fabrication / développement)",
      "Tiers": "Réseau",
      "Responsable": "UX/UI Designer"
    },
    "Indications": {
      "Degré de priorité": "4",
      "Mise en oeuvre": "3",
      "Impact écologique": "4",
      "Ressources Economisées": "Stockage / Réseau / Requêtes"
    },
    "Description": "Péférer les polices standards, car elles sont déjà présentes sur l’ordinateur de l’utilisateur, qui n’a donc pas besoin de les télécharger. \nOn économise ainsi de la bande passante, tout en accélérant l’affichage du site. Ces polices standards sont listées sur [https://systemfontstack.com/](https://systemfontstack.com/), par exemple.\n\nCependant si vous avez besoin d'une police particulière pour votre service numérique, même si c'est une Api font (google font, adobe font, etc.), vous devez :\n\n['Héberger vous-même la font', 'Utiliser un faux-gras via la propriété css ```-webkit-text-stroke``` si possible', \"Préférer une variable font si vous avez besoin de plus d'une font d'une police (ex: regular, bold, etc.)\", \"Optimiser la font en l'allégeant des caractères non nécessaires (exemple: un site en français n'a besoin que de caractères latins, l'alphabet cyrillique peut donc être supprimé)\"]\n\nSi vous avez des pictogrammes ou illustrations monochromes (voir la bonne pratique : Préférez les glyphes aux images) et si les droits d'utilisations de la font le permettent, incorporer les nouveaux glyphes directement dans la font.",
    "Exemple": "Voici un tableau comparatif de poids des fonts de la police Oswald :\n| | Regular  | Regular + bold         | Variable | Latin Regular |  Latin Regular + Latin Bold |  Latin Variable |\n|---:| :---------------: |:---------------:|:------------:| :-----:| :-----:| :-----:|\n|Poids|37.6kb|76.9kb|66kb|16kb|32.5kb| ?",
    "Solution Alternative": "Vos utilisateurs peuvent faire le choix, via les préférences de leurs navigateurs, de demander aux sites web, utilisant le media query `prefers-reduced-data` qu'ils visitent d'optimiser les requêtes réseau réalisées.\n\nDans l'exemple ci-dessous, nous ne téléchargeons que la font `Montserrat` si et seulement si l'utilisateur n'a pas défini de préférence. A contrario, la font `Arial` sera utilisée sans téléchargement de la `Montserrat`.\n\n```\n@media (prefers-reduced-data: no-preference) {\n    @font-face {\n        font-family: Montserrat;\n        font-style: normal;\n        font-weight: 400;\n        src:  url('fonts/montserrat-latin-regular.woff2');\n    }\n}\n\nbody {\n  font-family: Montserrat, Arial;\n}\n```\n\nPour plus d'informations sur la media query `prefers-reduced-data`: [https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-reduced-data](https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-reduced-data)",
    "Principe de validation": {
      "Le nombre ...": "de polices téléchargées",
      "est inférieur ou égal à": "2"
    },
    "source": "cnumr"
  },
  {
    "title": "Préférer la saisie assistée à l'autocomplétion",
    "Identifiants": {
      "GreenIT": "204",
      "V2": "4",
      "V3": "4",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "1. Spécification",
      "Tiers": "Utilisateur/Terminal",
      "Responsable": "PO/AMOA"
    },
    "Indications": {
      "Degré de priorité": "3",
      "Mise en oeuvre": "3",
      "Impact écologique": "3",
      "Ressources Economisées": "Requêtes"
    },
    "Description": "L'autocomplétion, ou complément automatique est une fonctionnalité très répandue consistant à suggérer à l'utilisateur\ndes résultats correspondant à sa recherche pendant sa saisie. Par exemple, un site permettant de rechercher un itinéraire\nva proposer « Paris », « Lyon Part-Dieu » et « Paray le Monial » quand l'utilisateur tape « Par ».\n\nL'implémentation de l'autocomplétion consiste à envoyer une requête au serveur à chaque caractère saisi pour récupérer les\nrésultats correspondants. On peut donc avoir beaucoup de requêtes effectuées et beaucoup de ressources dépensées.\n\nDans la mesure du possible, cette fonctionnalité est à remplacer par la saisie assistée.\nCela consiste à guider l’utilisateur par un ensemble d’informations et d’indices : \n\n['Présentation du format attendu en grisé dans le champ de saisie (`placeholder`)', 'Texte expliquant le format attendu', 'Réaction de l’interface avec un message d’erreur ou un changement de couleur et aide textuelle lorsque la saisie est incorrecte', 'etc.']\n\nLes interactions liées à la saisie assistée sont gérées localement, ce qui réduit les échanges avec le serveur.\n\nPour l'exemple de la recherche d'itinéraire et de la complétion des villes, il est possible, en cas d'ambiguïté, de proposer\nles différents résultats après la soumission du formulaire. L'utilisateur entre une chaine de caractère, par exemple « Lens »,\nsoumet le formulaire, et se voit à ce moment proposées différentes options : « Lens (France) », « Lens (Belgique) », \n« Loison sous Lens ».\n\nSi le recours à l'autocomplétion ne peut pas être évité il est possible de minimiser le nombre de requêtes avec des optimisations simples : \n\n[\"Ajouter un délai de quelque dixièmes de secondes entre l'ajout d'un caractère et la requête : cela permet de ne pas déclencher de requête si l'utilisateur n'a pas terminé sa saisie.\", \"Limiter le nombre de résultats affichés par l'autocomplétion, priorisés par une note de pertinence\", 'Fixer un nombre de caractères minimal avant de chercher à compléter.', \"Si la taille de la base de données le permet, l'inclure dans le code html ou dans le `local storage` et effectuer l'autocomplétion côté client.\", 'Mettre en cache les résultats des recherches avec pour clef la chaîne saisie pour moins solliciter la base de données.', 'Contextualiser les résultats pour en limiter le nombre.']",
    "Exemple": "Gain potentiel : à chaque fois que l’on utilise la saisie assistée pour une fonctionnalité, plutôt que l’autocomplétion, on réduit le nombre de requêtes associées par un facteur 10.",
    "Solution alternative": "Si la donnée qui est proposée à l'utilisateur est assez petite en quantité, vous pouvez l'inclure directement dans votre code HTML et utiliser l'éléments natif [datalist](https://developer.mozilla.org/fr/docs/Web/HTML/Element/datalist).\n\nCe système proposera nativement, et sans aller/retour avec le serveur, un mécanisme d'autocompletion.\n\n```\n<label for=\"ice-cream-choice\">Choose a flavor:</label>\n<input list=\"ice-cream-flavors\" id=\"ice-cream-choice\" name=\"ice-cream-choice\" />\n\n<datalist id=\"ice-cream-flavors\">\n    <option value=\"Chocolate\">\n    <option value=\"Coconut\">\n    <option value=\"Mint\">\n    <option value=\"Strawberry\">\n    <option value=\"Vanilla\">\n</datalist>\n```",
    "Principe de validation": {
      "Le nombre ...": "de champs en autocomplétion",
      "est inférieur ou égal à": "20%"
    },
    "source": "cnumr"
  },
  {
    "title": "Économiser de la bande passante grace à un ServiceWorker",
    "Identifiants": {
      "GreenIT": "",
      "V2": "",
      "V3": "",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "3. Réalisation (fabrication / développement)",
      "Tiers": "Réseau",
      "Responsable": "Architecte Logiciel/Développeur"
    },
    "Indications": {
      "Degré de priorité": "4",
      "Mise en oeuvre": "3",
      "Impact écologique": "4",
      "Ressources Economisées": "Réseau"
    },
    "Description": "La plupart des pages partagent une structure commune encadrant le \"contenu utile\".\nÀ l'exception du `<title>` et quelques métadonnées de l'entête,\nil serait donc assez facile de les _reconstituer_ par concaténation de trois ressources :\nune entête et un pied de page commun à toutes les pages,\net le contenu propre à chacune.\n\nCette concaténation peut être effectuée dans le navigateur directement _via_ un Service Worker,\navec l'entête et le pied de page profitant de la mise en cache HTTP,\nchaque page étant alors réduite au téléchargement du \"contenu utile\" seul.\nLe serveur devra être capable de servir à la fois la page complète,\npour l'accès initial au site et pour les navigateurs ne supportant pas les Service Workers,\net le _fragment_ de la page sans son entête et pied de page,\npour pouvoir faire la concaténation dans le Service Worker.\nCertains `<meta>` et `<link>` propres au référencement ou aux partages sur les réseaux sociaux, et donc inutiles dans le navigateur,\npourront être complètement omises de ce _fragment_ pour en réduire encore le poids.\nLes autres, ainsi que le `<title>`, peuvent en général être positionnées dans le `<body>` sans impact sur l'utilisabilité de la page.\nAlternativement, ils peuvent être recréés par JavaScript,\nou injectés directement dans le `<head>` par le Service Worker en concaténant non pas 3 parties, mais 4 ou 5\n(ces éléments pourraient être synthétisés à partir des entêtes de réponse HTTP du contenu de la page, pour conserver le même nombre de requêtes).\n\nOn concède ici un peu de temps processeur dans le terminal,\nune requête initiale supplémentaire pour le Service Worker,\npuis deux requêtes supplémentaires pour l'entête et le pied de page,\ncontre de grosses économies dans les quantités de données échangées pour chaque page.\nCes coûts concédés sont amortis lors de navigations dans le site (comme pour une SPA),\nmais également lors de prochaines visites du site,\ntant que le navigateur n'aura pas évincé le Service Worker.",
    "Exemple": "Début 2020, Philip Walton a pu mesurer sur son blog une réduction des échanges réseau de près de 48%\net une amélioration des performances (First Contentful Paint) de plus de 52%\navec cette technique.\n\nSource: https://philipwalton.com/articles/smaller-html-payloads-with-service-workers/",
    "Principe de validation": {
      "Le nombre ...": "de pages chargées dans leur version complète",
      "est inférieur ou égal à": "1"
    },
    "source": "cnumr"
  },
  {
    "title": "Optimiser la taille des cookies",
    "Identifiants": {
      "GreenIT": "65",
      "V2": "82",
      "V3": "82",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "3. Réalisation (fabrication / développement)",
      "Tiers": "Réseau",
      "Responsable": "Architecte Logiciel/Développeur"
    },
    "Indications": {
      "Degré de priorité": "3",
      "Mise en oeuvre": "4",
      "Impact écologique": "3",
      "Ressources Economisées": "Réseau"
    },
    "Description": "Un cookie permet de maintenir un état entre le navigateur de l’internaute et le serveur web distant grâce à une donnée partagée.\nCette donnée est transféré dans chaque requête HTTP.\nIl faut donc optimiser au maximum sa taille et le supprimer dès que sa présence n’est plus obligatoire.",
    "Exemple": "On peut supprimer un cookie lorsqu’il n’est plus utile en précisant une durée d’expiration nulle ou négative, de la manière suivante :\n\n```\nSet-Cookie: user_mavariable=; Max-Age=0\n```\n\nVoir la RFC 6265 de l’IETF (Internet Engineering Task Force) pour en savoir plus sur les cookies :\nhttps://datatracker.ietf.org/doc/html/rfc6265",
    "Principe de validation": {
      "Le nombre ...": "de cookies non utiles ou non optimisés",
      "est inférieur ou égal à": "0"
    },
    "source": "cnumr"
  },
  {
    "title": "Stocker les données dans le cloud",
    "Identifiants": {
      "GreenIT": "71",
      "V2": "92",
      "V3": "93",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "4. Production",
      "Tiers": "Datacenter",
      "Responsable": "Administrateur systèmes"
    },
    "Indications": {
      "Degré de priorité": "2",
      "Mise en oeuvre": "3",
      "Impact écologique": "2",
      "Ressources Economisées": "Stockage"
    },
    "Description": "Pour optimiser l’espace de stockage nécessaire aux ressources d’un site web ou d’un service en ligne, il peut être intéressant d’utiliser des solutions de cloud computing. Ainsi, tout en disposant d’une solution évolutive (elastic en anglais), on ne monopolise pas de ressources inutilement. L’autre intérêt est d’héberger les ressources statiques sur un domaine sans cookies. On évite alors de transporter le cookie avec chaque ressource transférée vers le navigateur (voir la bonne pratique n° 96).\n\nCette approche est donc judicieuse pour les images et autres ressources statiques. Comme il ne faut pas multiplier les domaines (voir la bonne pratique n° 55), le plus simple est de regrouper toutes les ressources statiques sur un seul service de stockage en ligne.",
    "Exemple": "Pour la réalisation d’un jeu concours basé sur des témoignages vidéo, il est plus efficace de recourir au service de stockage S3 d’Amazon que d’ajouter de nouveaux disques durs aux serveurs existants.",
    "Principe de validation": {
      "Le nombre ...": "de ressources, données du site web qui ne sont pas stockées sur une solution de cloud computing",
      "est inférieur ou égal à": "0"
    },
    "source": "cnumr"
  },
  {
    "title": "Limiter le recours aux carrousels",
    "Identifiants": {
      "GreenIT": "",
      "V2": "",
      "V3": "",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "2. Conception",
      "Tiers": "Utilisateur/Terminal",
      "Responsable": "UX/UI Designer"
    },
    "Indications": {
      "Degré de priorité": "4",
      "Mise en oeuvre": "4",
      "Impact écologique": "4",
      "Ressources Economisées": "Processeur / Mémoire vive / Stockage / Réseau / Requêtes"
    },
    "Description": "Le carrousel souvent utilisé pour mettre en avant de multiples contenus montrent rapidement ses limites en terme de conversion avec un impact négatif sur l'expérience utilisateur. Sa présence implique plusieurs points critiques :\n\n['Un alourdissement du poids des pages par la présence de CSS et JavaScript dédié mais également par le contenu présent sur chaque écran du carrousel.', \"Une complexité en terme d'assurance qualité web et d'accessibilité numérique.\", \"Une utilisation plus importante des ressources processeurs dans le cas d'un carrousel automatique.\"]",
    "Exemple": "Les balises `<img />` possèdent un attribut HTML `loading` qui permet nativement un chargement progressif des images.\n`<img src=\"mon_image.webp\" alt=\"\" loading=\"lazy\" />`\n\nLes animations de certains attributs CSS impliquent un repaint/reflow des navigateurs qui demande des ressources machines. Pour limiter cela, préférez les animations des carrousels par la propriété CSS `transform`.",
    "Solution alternative": "Limiter au maximum l'utilisation des carrousels en privilégiant du contenu statique mis à jour régulièrement.\nDans le cas contraire :\n\n['Mettre en place un contrôle simple et complet du composant (arrêt, écran suivant/précédent)', 'Préférez un chargement progressif des images présentes dans les différents écrans.', 'Préférez les animations impliquant une utilisation des ressources processeurs.', \"Limiter le nombre d'écrans présents dans le carrousel.\"]",
    "Principe de validation": {
      "Le nombre ...": "d'écrans présents dans le carrousel",
      "est inférieur ou égal à": "3"
    },
    "source": "cnumr"
  },
  {
    "title": "Rendre les éléments du DOM invisibles lors de leur modification",
    "Identifiants": {
      "GreenIT": "44",
      "V2": "44",
      "V3": "42",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "3. Réalisation (fabrication / développement)",
      "Tiers": "Utilisateur/Terminal",
      "Responsable": "Architecte Logiciel/Développeur"
    },
    "Indications": {
      "Degré de priorité": "3",
      "Mise en oeuvre": "4",
      "Impact écologique": "4",
      "Ressources Economisées": "Processeur"
    },
    "Description": "Lorsqu’un élément du DOM (Document Object Model) doit être modifié par plusieurs propriétés, chaque changement de style ou de contenu va générer un repaint ou un reﬂow. Aussi est-il généralement plus économe de :\n\n['rendre l’élément invisible (passer la propriété display à none) (1 reﬂow) ;', 'modifier toutes les propriétés de l’élément et rendre l’élément à nou-veau visible (1 reﬂow).']\n\nSoit 2 reﬂow au maximum.",
    "Exemple": "Procéder comme suit :\n\n```\nvar elem = document.getElementById('foo'); elem.style.display ='none'; // Génère 1 reﬂow elem.style.width   ='10em';\nelem.style.height ='auto';\n// ... autres changements ...\nelem.style.display ='block'; // Génère 1 reﬂow\n```\n\nAu final, 2 reﬂow sont nécessaires au lieu de 6 ou 7 potentiellement.",
    "Principe de validation": {
      "Le nombre ...": "de manipulations d'un élément du DOM sans qu'il soit rendu invisible pendant sa modification",
      "est inférieur ou égal à": "1"
    },
    "source": "cnumr"
  },
  {
    "title": "Optimiser et générer les médias avant importation sur un CMS",
    "Identifiants": {
      "GreenIT": "99",
      "V2": "58",
      "V3": "58",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "5. Utilisation",
      "Tiers": "Utilisateur/Terminal",
      "Responsable": "Utilisateur"
    },
    "Indications": {
      "Degré de priorité": "4",
      "Mise en oeuvre": "4",
      "Impact écologique": "4",
      "Ressources Economisées": "Processeur / Mémoire vive / Réseau / Stockage"
    },
    "Description": "Les CMS les plus connus proposent de nombreuses fonctionnalités pour optimiser (compresser, redimensionner, etc.) et générer vos médias (images, pdf, documents, audios et vidéos) souvent via l'installation de plugins ou extensions. Parfois payants, mais surtout consommateurs en terme de CPU, de mémoire vive, de réseau et de stockage, ces plugins n'évitent pas l'importation du média disproportionné (taille, dimension et qualité) ou inadapté par son format par rapport à son utilisation finale.",
    "Exemple": "Quelques outils pouvant vous aider à optimiser vos médias sur votre ordinateur :\n\n['[FFmpeg](https://www.ffmpeg.org/)', '[Any Video Converter](https://www.any-video-converter.com/products/video-converter-free/)', '[Xnview](https://www.xnview.com/fr/)', '[Gimp](https://www.gimp.org/)', '[Inskape](https://inkscape.org/fr/)', '[PDFedit](https://sourceforge.net/projects/pdfedit/)', 'etc.']",
    "Principe de validation": {
      "Le nombre ...": "de contenus optimisés directement par le CMS",
      "est inférieur ou égal à": "0"
    },
    "source": "cnumr"
  },
  {
    "title": "Privilégier un fournisseur d'électricité écoresponsable",
    "Identifiants": {
      "GreenIT": "67",
      "V2": "85",
      "V3": "87",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "4. Production",
      "Tiers": "Datacenter",
      "Responsable": "Administrateur systèmes"
    },
    "Indications": {
      "Degré de priorité": "3",
      "Mise en oeuvre": "3",
      "Impact écologique": "2",
      "Ressources Economisées": "Émissions de gaz à effet de serre"
    },
    "Description": "Pour alimenter vos équipements numériques, utilisez autant que possible une électricité ayant le minimum d'impacts environnementaux lors de sa production (ex: hydraulique).\nÀ ce jour, il n'existe pas de mécanisme solide garantissant que l'électricité que vous consommez a été produite avec des impacts plus faibles. \nFaute de mieux, une possibilité est soit de choisir un fournisseur qui n'achète aucune électricité produite à partir de ressources fossiles, soit d'acheter des certificats de garantie d’origine.",
    "Exemple": "Bien que cela ne concerne que les émissions de gaz à effet de serre, https://app.electricitymap.org/map permet d'être informé sur l'intensité carbone en fonction du pays du fournisseur.\n\nPour en savoir plus sur les certificats de garantie d’origine et l’électricité :\nhttps://www.greenit.fr/tag/electricite",
    "Principe de validation": {
      "Le nombre ...": "de non fourniture de preuve de l'achat de certificats de garantie d'origine par l'hébergeur",
      "est inférieur ou égal à": "0"
    },
    "source": "cnumr"
  },
  {
    "title": "Compresser les fichiers CSS, JavaScript, HTML et SVG",
    "Identifiants": {
      "GreenIT": "86",
      "V2": "80",
      "V3": "78",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "3. Réalisation (fabrication / développement)",
      "Tiers": "Réseau",
      "Responsable": "Architecte Logiciel/Développeur"
    },
    "Indications": {
      "Degré de priorité": "4",
      "Mise en oeuvre": "3",
      "Impact écologique": "4",
      "Ressources Economisées": "Réseau"
    },
    "Description": "Compresser les feuilles de style CSS, les bibliothèques JavaScript ainsi que les fichiers HTML pour limiter l’utilisation de la bande passante et améliorer les temps de chargement.\nL’algorithme GZIP est un standard de la compression coté serveur, il permet de compresser à la volée les ressources avant de les envoyer aux clients.\nPlus récemment, BROTLI a été popularisé avec des performances accrues, il est supporté par tous les navigateurs les plus répandus.",
    "Exemple": "Pour utiliser `BROTLI` dans Apache, il suffit d’ajouter la configuration suivante :\n\n```\n# compress html, text, xml, css, javascript\nAddOutputFilterByType BROTLI_COMPRESS text/html text/plain text/xml text/css text/javascript application/javascript\n\n# Or, compress certain ﬁle types in a specific directory:\n<Directory \"/your-directory\">\n    AddOutputFilterByType BROTLI_COMPRESS text/html\n</Directory>\n```\n\nLe serveur web NGINX gère par défaut la compression GZIP mais uniquement pour les fichiers HTML. \nPour l'activer sur les images et autres ressources se référer à cette page: https://www.digitalocean.com/community/tutorials/how-to-improve-website-performance-using-gzip-and-nginx-on-ubuntu-20-04\n\nPour installer et configurer brotli sur NGINX, voir https://github.com/google/ngx_brotli.",
    "Principe de validation": {
      "Le nombre ...": "de fichiers CSS, JavaScript,  HTML et SVG non compressés",
      "est inférieur ou égal à": "0"
    },
    "source": "cnumr"
  },
  {
    "title": "Choisir un hébergeur \"éco-responsable\"",
    "Identifiants": {
      "GreenIT": "66",
      "V2": "84",
      "V3": "86",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "4. Production",
      "Tiers": "Datacenter",
      "Responsable": "Administrateur systèmes"
    },
    "Indications": {
      "Degré de priorité": "4",
      "Mise en oeuvre": "3",
      "Impact écologique": "3",
      "Ressources Economisées": "Déchets électroniques / Consommation électrique / Émissions de gaz à effet de serre"
    },
    "Description": "Préférer un hébergeur qui combine des serveurs économes à une alimentation sans énergie fossile (pétrole, gaz, charbon) \nbasé principalement sur des sources d’énergies renouvelables.\nLes six critères à prendre en compte sont :\n\n['gestion des DEEE (déchets d’équipements électriques et électroniques) ;', 'efficience énergétique du data center [Power Usage Effectiveness (PUE) / Carbon Usage Effectiveness (CUE) /\\nWater Usage Effectiveness (WUE)] ;', 'politique d’achat responsable ;', 'respect de la dimension sociale ;', 'alimentation aux énergies bas carbone ;', 'compensation carbone.']",
    "Exemple": "De nombreux hébergeurs partagent leur politique environnementale, et diffusent la valeur de \nleurs indicateurs (PUE / CUE / WUE...). C'est le cas de : \n\n['[OVH](https://corporate.ovhcloud.com/fr/sustainability/environment/)', '[SCALEWAY](https://www.scaleway.com/fr/leadership-environnemental/)', '[INFOMANIAK](https://www.infomaniak.com/fr/ecologie)']",
    "Principe de validation": {
      "Le nombre ...": "d'hébergeurs dont le PUE supérieur à 1,5",
      "est inférieur ou égal à": "0"
    },
    "source": "cnumr"
  },
  {
    "title": "Sources",
    "Identifiants": {
      "GreenIT": "6",
      "V2": "7",
      "V3": "6",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "2. Conception",
      "Tiers": "Utilisateur/Terminal",
      "Responsable": "PO/AMOA"
    },
    "Indications": {
      "Degré de priorité": "4",
      "Mise en oeuvre": "4",
      "Impact écologique": "5",
      "Ressources Economisées": "Processeur / Réseau"
    },
    "Description": "Lorsque le contexte le permet, privilégier l’approche « mobile first » qui consiste à concevoir un site/service en ligne\npour les terminaux mobiles,\net n’élargir sa couverture fonctionnelle pour de plus grands écrans que si l’apport fonctionnel/ergonomique est justifié.\nDans ce cas, opter alors pour le chargement adaptatif.\nCette approche consiste à sélectionner les ressources, y compris JS et CSS, les plus adaptées au contexte d'utilisation (taille de l'écran / de la fenêtre, densité de pixels, qualité du réseau, quantité de mémoire vive, etc.), si possible côté serveur.\nOn s’assure ainsi de ne pas consommer inutilement de la bande passante, \nni de trop solliciter le processeur et la mémoire du terminal pour des traitements inutiles.",
    "Exemple": "Côté serveur, on pourra utiliser les _client hints_, ou à défaut l'identifiant du navigateur couplé à un tableau de capacités des navigateurs (aussi appelé _user agent sniffing_, avec ses limitations).\n\nCôté client, les _media queries_ (notamment dans les attributs `media` des `<link>` pour la sélection de feuilles de styles CSS), les attributs `srcset` et `sizes` des `<img>`, les sous-éléments `<source>` des `<picture>`, `<video>` et `<audio>` pourront être utiles, et les mêmes informations disponibles dans les _client hints_ peuvent également être récupérées par des APIs JavaScript pour éventuellement charger du code et/ou du contenu complémentaire dynamiquement.\n\nDans tous les cas, priviligiez un mode par défaut minimaliste permettant l'accès à votre site même si toutes ses fonctionnalités ne sont pas supportées par tous les navigateurs (sans trop détériorer l'expérience utilisateur bien sûr!).",
    "Principe de validation": {
      "Le nombre ...": "de conception ne s'appuyant pas sur une approche \"mobile first\"",
      "est inférieur ou égal à": "1"
    },
    "source": "cnumr"
  },
  {
    "title": "Avoir un titre de page et une metadescription pertinents avec le contenu de la page",
    "Identifiants": {
      "GreenIT": "",
      "V2": "",
      "V3": "",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "2. Conception",
      "Tiers": "Utilisateur/Terminal",
      "Responsable": "Référenceur (SEO)"
    },
    "Indications": {
      "Degré de priorité": "4",
      "Mise en oeuvre": "4",
      "Impact écologique": "4",
      "Ressources Economisées": "Processeur / Mémoire vive / Réseau / Requêtes"
    },
    "Description": "Un titre de page `<h1>`, ainsi que son équivalent `<title>`, adjoints à une balise `<meta name=\"description\">` pertinente doivent être parfaitement en accord avec le contenu de la page associée.\nCette optimisation répond à l'intention de recherche de l'utilisateur, lui évitant une visite inutile (des allers-retours pour trouver l'information recherchée) \net en raccourcit par conséquence son temps de parcours au sein des moteurs de recherche.\n\nDe plus, les éléments `<title>` et `<meta name=\"description\">` sont parfois utilisés de manière automatique sur les réseaux sociaux ou lors de partage de liens. Les soigner qualitativement permet :\n\n[\"d'indexer correctement les pages de contenus par les moteurs de recherche et les annuaires,\", \"d'assurer l'identification du site et du contenu de la page d'atterrissage,\", \"de garantir la compréhension avant l'accès au contenu,\", \"de qualifier la lecture du contenu ou de l'information demandée au sein de la page associée.\"]",
    "Principe de validation": {
      "Le nombre ...": "de titres de pages non repris dans la balise TITLE et sans le nom du site",
      "est inférieur ou égal à": "0"
    },
    "source": "cnumr"
  },
  {
    "title": "Limiter la taille des e-mails envoyés",
    "Identifiants": {
      "GreenIT": "104",
      "V2": "112",
      "V3": "111",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "5. Utilisation",
      "Tiers": "Utilisateur/Terminal",
      "Responsable": "Utilisateur"
    },
    "Indications": {
      "Degré de priorité": "3",
      "Mise en oeuvre": "3",
      "Impact écologique": "3",
      "Ressources Economisées": "Réseau / Requêtes"
    },
    "Description": "Lorsqu’une notification, une alerte ou un message de confirmation doit être envoyé par e-mail à l’utilisateur, limiter la taille du courriel envoyé.\nÉviter les pièces jointes et les images intégrées. Préférer un contenu court. Éventuellement, utiliser du texte brut plutôt que du HTML.",
    "Exemple": "L’envoi d’un e-mail de confirmation de prise en compte d’une demande de contact ne justifie pas l’ajout de code HTML et d’images.\nUn message HTML basique utilise en moyenne :\n\n['au moins 2 images (le logo et une signature en bas de page), soit 10 Ko environ ;', '12 Ko de code HTML pour la mise en page (styles inline, tableaux...) ;', '4 Ko de texte (le message + 2 liens d’action).']\n\nAu final :\n\n['e-mail HTML = 26 Ko ;', 'e-mail text brut = 4 Ko.']\n\nSoit un gain de 22 Ko par e-mail envoyé.\nDans le cas d’un site transactionnel avec, par exemple, des alertes clients et internes, le gain potentiel devient considérable.",
    "Principe de validation": {
      "Le nombre ...": "de courriels envoyés de plus de 1mo",
      "est inférieur ou égal à": "0"
    },
    "source": "cnumr"
  },
  {
    "title": "Entretenir son site régulièrement",
    "Identifiants": {
      "GreenIT": "",
      "V2": "",
      "V3": "",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "5. Utilisation",
      "Tiers": "Utilisateur/Terminal",
      "Responsable": "Utilisateur"
    },
    "Indications": {
      "Degré de priorité": "4",
      "Mise en oeuvre": "4",
      "Impact écologique": "4",
      "Ressources Economisées": "Processeur / Mémoire vive / Réseau / Stockage"
    },
    "Description": "Entretenir son site régulièrement est essentiel non seulement pour garantir son bon fonctionnement et améliorer l'expérience utilisateur, mais aussi pour réduire son empreinte environnementale. Avec le temps, le contenu et les fonctionnalités de son site s'accumulent, et le risque d'afficher et stocker des informations inutiles, obsolètes voire contre-productives s'intensifie.\nCette mauvaise pratique est problématique à plusieurs niveaux car elle peut :\n\n['Causer un mauvais référencement de votre site;', 'Donner une mauvaise image ;', \"Ralentir son chargement et dégrader l'expérience utilisateur ;\", \"Perdre ses visiteurs en affichant plein d'informations inutiles/obsolètes ;\", 'Consommer inutilement des ressources pour le stockage de données inutilisées ;', \"Créer des incompatibilités avec d'autres outils installés sur votre site ;\", \"Être source d'attaques informatiques.\"]",
    "Exemple": "Dans le cas d'utilisation d'un CMS :\n\n['mettez à jour le CMS et ses extensions pour réduire les problématiques de sécurités.']",
    "Principe de validation": {
      "Le nombre ...": "de mises à jour et/ou de revue de contenus supérieures à 1 an",
      "est inférieur ou égal à": "0"
    },
    "source": "cnumr"
  },
  {
    "title": "Encoder les sons en dehors du CMS",
    "Identifiants": {
      "GreenIT": "96",
      "V2": "60",
      "V3": "60",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "5. Utilisation",
      "Tiers": "Utilisateur/Terminal",
      "Responsable": "Utilisateur"
    },
    "Indications": {
      "Degré de priorité": "4",
      "Mise en oeuvre": "4",
      "Impact écologique": "4",
      "Ressources Economisées": "Processeur / Mémoire vive / Réseau / Stockage"
    },
    "Description": "Adapter et optimiser les sons en dehors du site web. Cette mesure permet d’économiser beaucoup de bande passante et soulagera la CPU et la mémoire vive, car un serveur web n’est pas optimisé pour le (ré)encodage des fichiers audio.",
    "Exemple": "Si le son ajouté directement dans le CMS pèse 7 Mo, on économisera :\n\n['7 Mo de bande passante lors de l’envoi ;', '100 Ko lors de l’écoute du résultat ;', '6,9 Mo de stockage sur le disque dur du serveur.']",
    "Principe de validation": {
      "Le nombre ...": "de fichiers sonores encodés directement par le CMS",
      "est inférieur ou égal à": "0"
    },
    "source": "cnumr"
  },
  {
    "title": "Réduire au nécessaire les logs des serveurs",
    "Identifiants": {
      "GreenIT": "82",
      "V2": "99",
      "V3": "103",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "4. Production",
      "Tiers": "Datacenter",
      "Responsable": "Architecte Logiciel/Développeur"
    },
    "Indications": {
      "Degré de priorité": "2",
      "Mise en oeuvre": "2",
      "Impact écologique": "3",
      "Ressources Economisées": "Processeur / Mémoire vive / Stockage"
    },
    "Description": "Les logs des serveurs (web, applicatif, base de données) pouvant devenir très volumineux, il est recommandé de les configurer dans leur ensemble.\nEn réglant au plus juste le niveau log de l’application (exemple: uniquement information/warning/error) et en ne traçant que les informations pertinentes,\non évite des écritures sur le disque qui peuvent être massives, ce qui limite la consommation de cycles CPU et réduit l’espace de stockage nécessaire.\n\nPour éviter de saturer des disques, il est également recommandé de mettre en place une durée de rétention et une rotation des logs en fonction du besoin lors de l’exploitation du service.",
    "Exemple": "Les logs d’accès d’un serveur Apache peuvent être configurés comme suit pour exclure les ressources statiques et flux RSS :\n\n```\nSetEnvIf Request_URI \"\\.(ico|pdf|ﬂv|jpg|jpeg|png|gif| js|css|gz|swf|txt)$\" dontlog\nSetEnvIf Request_URI \"^/rss/\" dontlog\nCustomLog /var/log/apache/access.log combined env=!dontlog\n```",
    "Principe de validation": {
      "Le nombre ...": "de logs sans durée maximale de rétention",
      "est inférieur ou égal à": "0"
    },
    "source": "cnumr"
  },
  {
    "title": "Combiner les fichiers CSS et JavaScript",
    "Identifiants": {
      "GreenIT": "89",
      "V2": "81",
      "V3": "79",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "4. Production",
      "Tiers": "Réseau",
      "Responsable": "Architecte Logiciel/Développeur"
    },
    "Indications": {
      "Degré de priorité": "4",
      "Mise en oeuvre": "3",
      "Impact écologique": "4",
      "Ressources Economisées": "Requêtes"
    },
    "Description": "La combinaison de feuilles de style CSS ou de bibliothèques Javascript permet de réduire le nombre de requêtes HTTP.",
    "Exemples": "Dans Wordpress, le plugin gratuit, `Autoptimize`, permet de combiner simplement les fichiers CSS.\n\nAvec Webpack, le plugin `webpack-merge-and-include-globally` facilite la fusion des fichiers CSS et Javascript.",
    "Principe de validation": {
      "Le nombre ...": "de fichiers CSS et JS non combinés",
      "est inférieur ou égal à": "2"
    },
    "source": "cnumr"
  },
  {
    "title": "Réduire les accès au DOM via JavaScript",
    "Identifiants": {
      "GreenIT": "32",
      "V2": "42",
      "V3": "54",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "3. Réalisation (fabrication / développement)",
      "Tiers": "Utilisateur/Terminal",
      "Responsable": "Architecte Logiciel/Développeur"
    },
    "Indications": {
      "Degré de priorité": "3",
      "Mise en oeuvre": "3",
      "Impact écologique": "3",
      "Ressources Economisées": "Processeur / Mémoire vive"
    },
    "Description": "L’accès au DOM (Document Object Model) via JavaScript est une procédure lourde qui consomme beaucoup de cycles processeur (CPU). Réduire autant que possible ces accès.\n\nPour cela, vous pouvez assigner le nœud dans des variables que vous réutiliserez lors du cycle de vie de l’application, ce qui évite de retraverser l’arbre à chaque manipulation du document.\n\nIl est également possible d’utiliser des bibliothèques de type « Shadow DOM », qui optimisent les modifications de l’arbre par un système de batch.",
    "Exemple": "Pour en savoir plus, vous pouvez consulter le projet de Shadow DOM du W3C :\nhttps://w3c.github.io/webcomponents/spec/shadow/\net les préconisations du W3C pour réduire les accès au DOM via JavaScript :\nhttps://www.w3.org/wiki/JavaScript_best_practices#Keep_DOM_access_to_a_minimum",
    "Principe de validation": {
      "Le nombre ...": "d'accès à un élément HTML sans passer par une variable locale",
      "est inférieur ou égal à": "0"
    },
    "source": "cnumr"
  },
  {
    "title": "Limiter les e-mails lourds et redondants",
    "Identifiants": {
      "GreenIT": "102",
      "V2": "110",
      "V3": "109",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "5. Utilisation",
      "Tiers": "Utilisateur/Terminal",
      "Responsable": "Utilisateur"
    },
    "Indications": {
      "Degré de priorité": "3",
      "Mise en oeuvre": "3",
      "Impact écologique": "3",
      "Ressources Economisées": "Processeur / Réseau / Requêtes"
    },
    "Description": "Les e-mails sont sauvegardés et dupliqués sur les disques du fournisseur d'e-mail. \nIl convient de raisonner l'envoi d'e-mail automatiques (ex: newsletters, gestion client, suivi de commande) en limitant leur nombre, les pièces jointes et le nombre de destinataires.",
    "Exemple": "Newsletters:\n\n[\"Définir la fréquence d'envoi au strict nécessaire\", \"Envoyer aux seules personnes essentielles à la newsletter et celles le souhaitant (liste d'inscription, ciblage client)\", \"Envoyer des mails de désinscription aux clients n'ayant pas ouvert les x newsletters précédentes\", 'Éviter les pièces jointes et préférer les liens directs', 'Éviter les images et à défaut limiter leur taille']\n\nGestion client:\n\n['Réduire à un seul envoi pour les commandes internet (commande, confirmation de paiement, expédition, satisfaction, relance, satisfaction livraison, facture, ...)', \"Ne pas envoyer de pièce jointe si cela n'est pas nécessaire : lien vers le document sur le compte client par exemple.\"]",
    "Principe de validation": {
      "Le nombre ...": "d'emails avec pièce jointe",
      "est inférieur ou égal à": "0"
    },
    "source": "cnumr"
  },
  {
    "title": "Modifier plusieurs propriétés CSS en 1 seule fois",
    "Identifiants": {
      "GreenIT": "34",
      "V2": "32",
      "V3": "45",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "3. Réalisation (fabrication / développement)",
      "Tiers": "Utilisateur/Terminal",
      "Responsable": "Architecte Logiciel/Développeur"
    },
    "Indications": {
      "Degré de priorité": "3",
      "Mise en oeuvre": "4",
      "Impact écologique": "2",
      "Ressources Economisées": "Processeur"
    },
    "Description": "Pour limiter le nombre de repaint/reﬂow, il est conseillé de ne pas modifier des propriétés une à une. \nPréférer l’ajout/la suppression de classes CSS, ce qui permet de modifier en une seule fois plusieurs propriétés, tout en ne générant qu’un repaint/reﬂow (voir [la bonne pratique n° 45](/chapters/bonne_pratique_045_fr.md)).",
    "Exemple": "Préférer l’écriture :\n\n```\n<style>\n    .in-error { color: red;\n        font-weight: bold;\n    }\n</style>\n<script>\n    $el.bind('error', function () {\n        $el.addClass('in-error');\n    });\n    $el.bind('running'), function () {\n        $el.removeClass('in-error');\n    };\n</script>\n```",
    "Principe de validation": {
      "Le nombre ...": "de déclarations CSS pouvant être regroupées en une seule (margin, padding, ...), et n'utilisant pas la version courte",
      "est inférieur ou égal à": "0"
    },
    "source": "cnumr"
  },
  {
    "title": "Adapter les sons aux contextes d'écoute",
    "Identifiants": {
      "GreenIT": "95",
      "V2": "113",
      "V3": "112",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "5. Utilisation",
      "Tiers": "Utilisateur/Terminal",
      "Responsable": "Utilisateur"
    },
    "Indications": {
      "Degré de priorité": "2",
      "Mise en oeuvre": "2",
      "Impact écologique": "3",
      "Ressources Economisées": "Réseau"
    },
    "Description": "Les fichiers audio peuvent être volumineux et consommateurs de bande passante. Aussi est-il indispensable d’en optimiser le poids. Privilégier 3 formats couvrant les 3 grandes plates-formes (Windows, Mac OS X et Linux) :\n\n['MP3 (MPEG-1 Audio Layer 3) ;', 'AAC (Advanced Audio Coding) ;', 'Vorbis.\\nCes formats appliquent des algorithmes de compression très évolués permettant des gains de poids significatifs.']",
    "Exemple": "Des encodeurs comme LAME permettent de convertir au format MP3 des fichiers audio non compressés, mais également de jouer sur le taux d’échantillonnage, afin de gagner encore du poids, au détriment de la qualité audio. À tester sur chaque fichier sonore.\n\nDans le cas d’un fichier de référence WAV son.wav de 63 128 octets, sa conversion en MP3 donne :\n\n['un fichier son-128.mp3 de 10 823 octets (128 kb/s), 6 fois plus léger ;', 'un fichier son-64.mp3 de 6 508 octets (64 kb/s), 10 fois plus léger.']",
    "Principe de validation": {
      "Le nombre ...": "de codec audio propriétaires (non libres) et de pistes audio dont le ratio poids en mega octet/durée en minute est superieur a 1",
      "est inférieur ou égal à": "0"
    },
    "source": "cnumr"
  },
  {
    "title": "Limiter le recours aux canvas",
    "Identifiants": {
      "GreenIT": "",
      "V2": "",
      "V3": "",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "3. Réalisation (fabrication / développement)",
      "Tiers": "Utilisateur/Terminal",
      "Responsable": "Architecte Logiciel/Développeur"
    },
    "Indications": {
      "Degré de priorité": "3",
      "Mise en oeuvre": "4",
      "Impact écologique": "4",
      "Ressources Economisées": "Processeur / Réseau"
    },
    "Description": "L'élément HTML `canvas` est initialement conçu pour dessiner des graphiques, réaliser des jeux ou générer des images à la volée via des API JavaScript. Comme chaque script, l'utilisation de `canvas` a un impact significatif sur les besoins de ressources machines (CPU et/ou GPU) augmentant ainsi une mauvaise expérience utilisateur sur les machines les moins puissantes et entraînant également une surconsommation d'énergie.\nCet impact est plus important quand le rendu est réalisé de manière répétitive (effet dynamique, animation).\nIl est recommandé d'utiliser d'autres éléments HTML natifs quand cela est possible et à défaut de mettre en place des optimisations pour limiter les besoins en ressources machines.",
    "Exemple": [
      "Faire les rendus uniquement si nécessaire.",
      "Avec les animations, utiliser `window.requestAnimationFrame()` plutôt que `window.setInterval()`.",
      "Limiter l'utilisation de bibliothèques lourdes.",
      "Tester les performances de rendu."
    ],
    "Sources": [
      "[Element canvas](https://www.w3.org/TR/2011/WD-html5-20110405/the-canvas-element.html)",
      "[Optimiser les canvas](https://developer.mozilla.org/fr/docs/Web/API/Canvas_API/Tutorial/Optimizing_canvas)"
    ],
    "Principe de validation": {
      "Le nombre ...": "de `canvas` pouvant être remplacé par un élément HTML",
      "est inférieur ou égal à": "0"
    },
    "source": "cnumr"
  },
  {
    "title": "Éviter les temps de blocages par des traitements javascript trop longs",
    "Identifiants": {
      "GreenIT": "",
      "V2": "",
      "V3": "",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "3. Réalisation (fabrication / développement)",
      "Tiers": "Utilisateur/Terminal",
      "Responsable": "Architecte Logiciel/Développeur"
    },
    "Indications": {
      "Degré de priorité": "4",
      "Mise en oeuvre": "3",
      "Impact écologique": "4",
      "Ressources Economisées": "Processeur"
    },
    "Description": "Un navigateur comporte un processus qui transforme le code en une page web. Il doit accomplir plusieurs tâches avant de pouvoir afficher la page : \n\n['l’analyse du script HTML', 'la construction de la structure et du contenu d’une page web (DOM)', 'l’exécution de son code CSS et JavaScript.']\n\nOr l'exécution du code JavaScript peut occuper les processeurs du terminal à plus de 90% ce qui bloque les autres traitements voir les interactions avec l'utilisateur. \nMais surtout cela sollicite fortement le terminal ce qui conduit à deux choses :\n\n['une consommation excessive qui impacte directement le cycle de recharge de la batterie', \"le blocage du thread principal, qui dégrade l'expérience utilisateur, et qui peut être corrélé à la puissance du processeur (notamment sur mobile)\"]\n\nCes deux aspects peuvent mener à un renouvellement du terminal utilisateur à cause d'une obsolescence perçue.\n\nPour éviter cela, préférer découper vos JavaScript en petites tâches exécutées au moment requis et non pas avant.",
    "Exemple": "Le Total Blocking Time (TBT) mesure le temps total occupé par des « Long Tasks » (Tâches longues) durant l’activité principale du thread JavaScript.\nUne Long Task est un traitement qui dure plus de 50ms et qui monopolise le navigateur web.\nIl faut s'assurer que le TBT soit en dessous des 200 ms.\nLa mesure peut s'effectuer avec LightHouse ou Web Page Test.",
    "Principe de validation": {
      "Le nombre ...": "de tâches longues supérieures à 200 ms",
      "est inférieur ou égal à": "0"
    },
    "source": "cnumr"
  },
  {
    "title": "Favoriser les pages statiques",
    "Identifiants": {
      "GreenIT": "3",
      "V2": "51",
      "V3": "13",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "2. Conception",
      "Tiers": "Utilisateur/Terminal",
      "Responsable": "Architecte Logiciel/Développeur"
    },
    "Indications": {
      "Degré de priorité": "4",
      "Mise en oeuvre": "3",
      "Impact écologique": "5",
      "Ressources Economisées": "Processeur / Mémoire vive"
    },
    "Description": "Si une page ne doit être modifiée que deux fois par an, préférer des pages statiques, construites en dehors du CMS. \nCela permettra d’économiser des cycles CPU, de la bande passante, et réduira la consommation électrique.\n\nL’utilisation d’un système de gestion de contenu dynamique requiert en effet de charger les différentes couches logicielles \npour servir le contenu demandé par l’internaute : le serveur HTTP, le serveur d’applications, le système de stockage du contenu (base de données),\néventuellement les systèmes de cache associés, etc. En revanche, un fichier statique est directement lu et renvoyé à l’internaute par le serveur HTTP ou le serveur de cache, sans solliciter le serveur d’applications ou la base de données.",
    "Exemple": "En fonction du service numérique à concevoir, il est envisageable :\n\n['pour une landing page ou simple site vitrine de créer un site statique en HTML, CSS et JS.', \"pour un blog avec peu d'activité, ou de petite taille, de créer un site statique généré via un JAMstack (Jekyll, Hugo, Gasby, Eleventy, etc.) administré, si nécessaire, via un headless CMS ou un headless flat-file CMS (Strapi, Contenful, Flextype, etc.).\", 'pour un site ou une application web plus complexe de rendre les pages à faible taux de modifications (FAQ, About, mentions légales, etc.) statiques en utilisant des frameworks (Next, Nuxt, Svelte, etc.).']",
    "Principe de validation": {
      "Le nombre ...": "de pages dynamiques est",
      "est inférieur ou égal à": "25%"
    },
    "source": "cnumr"
  },
  {
    "title": "Optimiser les PDF",
    "Identifiants": {
      "GreenIT": "98",
      "V2": "109",
      "V3": "108",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "5. Utilisation",
      "Tiers": "Utilisateur/Terminal",
      "Responsable": "Utilisateur"
    },
    "Indications": {
      "Degré de priorité": "3",
      "Mise en oeuvre": "3",
      "Impact écologique": "3",
      "Ressources Economisées": "Réseau / Stockage"
    },
    "Description": "S’assurer, avant leur mise en ligne, que les PDF sont réellement optimisés pour le Web : taux d’échantillonnage et de compression des images, polices incorporées, résolution…\n\nLe cas échéant, proposer le téléchargement des PDF chapitre par chapitre.\n\nSi vous souhaitez offrir à l’utilisateur de télécharger un lecteur PDF, préférer un logiciel léger tel que Sumatra (4,3 Mo) au lecteur d’Adobe (48 Mo), soit une bande passante divisée par 10 à chaque téléchargement et, surtout, une plus faible consommation de mémoire vive (ce qui permet de lutter contre la fracture numérique et l’obsolescence programmée).",
    "Exemple": "Pour un rapport annuel en PDF :\n\n['vérifier que les images sont fortement compressées et à une résolution maximale de 72 dpi ;', 'n’inclure que les principales polices ;', 'découper le rapport en chapitres, afin de limiter les téléchargements inutiles.']",
    "Principe de validation": {
      "Le nombre ...": "de PDF non optimisés",
      "est inférieur ou égal à": "0"
    },
    "source": "cnumr"
  },
  {
    "title": "Limiter les outils d'analytics et les données collectées",
    "Identifiants": {
      "GreenIT": "",
      "V2": "",
      "V3": "",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "5. Utilisation",
      "Tiers": "Utilisateur/Terminal",
      "Responsable": "Utilisateur"
    },
    "Indications": {
      "Degré de priorité": "4",
      "Mise en oeuvre": "3",
      "Impact écologique": "4",
      "Ressources Economisées": "Processeur / Réseau / Stockage"
    },
    "Description": "Les outils utilisés pour suivre les actions des utilisateurs utilisent souvent beaucoup de ressources coté client : requêtes \nnombreuses, fichiers javascripts supplémentaires chargés, utilisation de plusieurs domaines additionnels, envoi de cookie, ...\n\nSi les informations issues de ce suivi ne sont pas indispensables, ne pas en utiliser. Sinon se limiter à un seul outil et privilégier \nune solution qui consomme peu de ressources",
    "Principe de validation": {
      "Le nombre ...": "d'outils d'analytics",
      "est inférieur ou égal à": "1"
    },
    "source": "cnumr"
  },
  {
    "title": "Limiter le nombre d'appels aux API HTTP",
    "Identifiants": {
      "GreenIT": "",
      "V2": "",
      "V3": "",
      "V4": "4022"
    },
    "Catégories": {
      "Cycle de vie": "2. Conception",
      "Tiers": "Datacenter",
      "Responsable": "Architecte Logiciel/Développeur"
    },
    "Indications": {
      "Degré de priorité": "4",
      "Mise en oeuvre": "3",
      "Impact écologique": "5",
      "Ressources Economisées": "Processeur / Réseau / Requêtes"
    },
    "Description": "Lorsqu'un internaute consulte une page web, le site peut récupérer du contenu à travers des API HTTP (webservice).\nDans ce cas, chaque affichage de page engendrera autant de requêtes HTTP vers les différentes API alors que le contenu sera probablement le même durant un certain temps.\n\nEn tant que fournisseur d'API (serveur), vous pouvez fixer des quotas afin d'inciter les utilisateurs à définir une stratégie de mise en cache des réponses et éviter des appels systématiques.\nEn tant qu'utilisateur d'API (client), vous devez mettre en cache les résultats obtenus afin de pouvoir les proposer à nouveau sans appeler systématiquement l'API HTTP.",
    "Exemple": [
      "Si vous récupérez des avis client via une API, vous pouvez probablement limiter le nombre de requête à une par jour,",
      "Si vous récupérez un flux Twitter pour l'afficher sur votre site, vous pouvez probablement limiter le nombre de requête à une par heure,",
      "Si vous affichez une donnée en \"temps réel\" sur la page accueil de votre site, vous pouvez mettre en place un cache de 2 secondes pour éviter que des milliers de visiteurs simultanés sur votre site, génèrent des milliers d'appels d'API durant la même seconde.",
      "En tant que fournisseur, si vous proposez une API, vous pouvez mettre en place des quotas par utilisateur et pour une période de temps"
    ],
    "Principe de validation": {
      "Le nombre ...": "de endpoints qui ne bénéficient pas d'une stratégie de cache pertinente",
      "est inférieur ou égal à": "0"
    },
    "source": "cnumr"
  },
  {
    "title": "Réduire le volume de données stockées au strict nécessaire",
    "Identifiants": {
      "GreenIT": "",
      "V2": "",
      "V3": "",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "2. Conception",
      "Tiers": "Datacenter",
      "Responsable": "Architecte Logiciel/Développeur"
    },
    "Indications": {
      "Degré de priorité": "4",
      "Mise en oeuvre": "4",
      "Impact écologique": "4",
      "Ressources Economisées": "Stockage"
    },
    "Description": "Réduire le volume de données stockées au nécessaire consiste à :\n\n['optimiser la gestion des gros volumes de données.', 'nettoyer les anciennes données, soit en les archivant hors ligne, soit en les supprimant.', 'vérifier que les sauvegardes peuvent être restaurées.', 'superviser la taille des espaces de stockage.']\n\nSuivant le type de données et leurs propriétaires, des contraintes légales peuvent amener à stocker dans le temps des données jamais utilisées.\n\nL’utilisation des données et leur degré d’importance impactent aussi la manière de les stocker.\n\nCette bonne pratique s'inscrit dans le cadre de la gestion du cycle de vie de l'information.",
    "Exemple": [
      "Définir des processus d'archivage : au moment de sa sortie, un rapport annuel est stocké sur un SSD (zone chaude). Un mois plus tard, il est archivé sur un stockage classique (zone froide). Enfin, dix ans plus tard, il est supprimé.",
      "Eviter les doublons entre les tables est un moyen d’optimiser le volume de données stockées.",
      "L’utilisation des données peut conduire à une dénormalisation des tables et donc une augmentation de l’espace de stockage."
    ],
    "Principe de validation": {
      "Le nombre ...": "de données stockées et non utiles pour le service numérique",
      "est inférieur à": "0"
    },
    "source": "cnumr"
  },
  {
    "title": "Héberger les ressources (CSS/JS) sur un domaine sans cookie",
    "Identifiants": {
      "GreenIT": "73",
      "V2": "96",
      "V3": "94",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "4. Production",
      "Tiers": "Datacenter",
      "Responsable": "Administrateur systèmes"
    },
    "Indications": {
      "Degré de priorité": "3",
      "Mise en oeuvre": "3",
      "Impact écologique": "4",
      "Ressources Economisées": "Réseau"
    },
    "Description": "Les images, feuilles de style CSS et fichiers JavaScript doivent être hébergés sur un domaine sans cookies. Cela évite au navigateur d’envoyer un cookie pour chaque ressource... alors qu’il est inutile. En effet, bien que transféré dans chaque requête HTTP, le cookie\nest inutile pour les contenus statiques, puisqu’il sert à maintenir un état entre le navigateur de l’internaute et le serveur d’applications distant grâce aux identifiants contenus dans le fichier texte. Il est donc préférable de stocker ce type de contenus sur un nom de domaine spécifique, par exemple static.mondomaine.com.",
    "Exemple": "Les leaders du Web utilisent un domaine séparé pour servir les ressources statiques qui ne nécessitent pas de cookies. Yahoo! emploie par exemple le domaine yimg.com, YouTube le domaine ytimg.com et Amazon le domaine images-amazon.com.",
    "Principe de validation": {
      "Le nombre ...": "de domaines servant des ressources statiques AVEC un cookie",
      "est inférieur ou égal à": "1"
    },
    "source": "cnumr"
  },
  {
    "title": "Respecter le principe de navigation rapide dans l’historique",
    "Identifiants": {
      "GreenIT": "28",
      "V2": "5",
      "V3": "7",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "2. Conception",
      "Tiers": "Utilisateur/Terminal",
      "Responsable": "UX/UI Designer"
    },
    "Indications": {
      "Degré de priorité": "3",
      "Mise en oeuvre": "4",
      "Impact écologique": "3",
      "Ressources Economisées": "Processeur / Réseau"
    },
    "Description": "Les navigateurs possèdent une fonction de navigation rapide dans l’historique (boutons Page précédente et Page suivante),\nsouvent nommée _back-forward cache_ ou encore _bfcache_.\n\nContrairement au cache HTTP qui permet de garder en mémoire les réponses aux requêtes précédemment effectuées et donc d'éviter de les générer plusieurs fois inutilement et d'accélérer le chargement de pages, le cache _bfcache_ permet de garder en mémoire une page entière. \nNéanmoins, comme l'utilisation de cette fonctionnalité mobilise des resources machine supplémentaires côté utilisateur, il faut veiller à alléger au maximum les fonctionnalités des pages stockées avec le _bfcache_. \nPar ailleurs, l'utilisation de _bfcache_ implique certaines précautions notamment lorsque le délai d'attente est dépassé (_setTimeout_). \nEn effet, comme les navigateurs suspendent l'exécution des timers en attente et les tâches dans les files d'attente JavaScript, et reprennent le traitement des tâches lorsque la page est restaurée à partir du _bfcache_, il peut y avoir des situations problématiques. \nPar exemple, si le navigateur suspend une tâche requise dans le cadre d'une transaction IndexedDB ou d'utilisation d'API et que d'autres onglets (utilisant les mêmes bases de données IndexedDB) sont ouverts à ce moment-là, le navigateur ne mettra pas en cache les différentes pages.\n\nPar conséquent, il faut éviter tout élément qui rendrait la page inéligible au _bfcache_,\net/ou qui rendrait la page inutilisable après l'avoir quittée\n(ou éventuellement les rendre utilisables à nouveau quand la page est réutilisée, ou juste avant qu'elle soit mise en cache).",
    "Exemple": "Éviter :\n\n[\"les actions lorsqu'on quitte la page (événements `unload` ou `beforeunload`, leur préférer `pagehide` si c'est vraiment nécessaire)\", 'les liens qui ouvrent de nouveaux onglets / fenêtres sans `rel=\"noopener\"` ou `rel=\"noreferrer\"`', \"de laisser des connexions (IndexedDB, `fetch()` ou XMLHttpRequest, Web Sockets, etc.) ouvertes quand l'utilisateur quitte la page\"]\n\nUtiliser les événéments `pageshow` et/ou `pagehide` pour réinitialiser les éléments qui le nécessitent,\npar exemple réactiver les boutons de formulaire qui se désactivent lors de la soumission\nou supprimer les informations sensibles (comme les mots de passe),\nou pour fermer/rouvrir des connexions persistantes.\n\nSource:\n\n['https://web.dev/bfcache/ (contenu sous licence CC BY 4.0 - _Back/forward cache_ par Philip Walton)']",
    "Principe de validation": {
      "Le nombre ...": "de pages inéligibles au _bfcache_",
      "est inférieur ou égal à": "0%"
    },
    "source": "cnumr"
  },
  {
    "title": "Utiliser un CDN",
    "Identifiants": {
      "GreenIT": "75",
      "V2": "102",
      "V3": "98",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "4. Production",
      "Tiers": "Datacenter",
      "Responsable": "Administrateur systèmes"
    },
    "Indications": {
      "Degré de priorité": "4",
      "Mise en oeuvre": "3",
      "Impact écologique": "4",
      "Ressources Economisées": "Processeur / Mémoire vive"
    },
    "Description": "Certains fichiers comme les bibliothèques JavaScript, les feuilles de style CSS, les images, etc., sont gourmands en ressources réseau, car ils sont généralement nombreux et de petite taille. C’est pourquoi il est conseillé d’utiliser les CDN (Content Delivery Network), qui rapprochent physiquement ces fichiers des internautes, générant de ce fait un gain important de bande passante et un meilleur temps de réponse.\n\nIl convient néanmoins de prendre conscience qu'il peut exister des cas où l'utilisation d'un CDN n'est pas réellement pertinente. Par exemple, dans le cas de services dont la cible est très localisée (par exemple: régional), il est plus opportun de privilégier un hébergement local et de qualité. D'autre part, un site web avec très peu de trafic pourrait rendre contre-productive l'utilisation d'un CDN basé sur le modèle \"pull\" car les extractions de fichiers du serveur d'origine pourraient être trop fréquentes.",
    "Exemple": "Utiliser les CDN fournis par Google qui hébergent les différentes bibliothèques JavaScript couramment utilisées.",
    "Principe de validation": {
      "Le nombre ...": "de ressources servies (fichiers) sans utiliser un CDN",
      "est inférieur ou égal à": "25%"
    },
    "source": "cnumr"
  },
  {
    "title": "Utiliser la délégation d'évènements",
    "Identifiants": {
      "GreenIT": "41",
      "V2": "46",
      "V3": "44",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "3. Réalisation (fabrication / développement)",
      "Tiers": "Utilisateur/Terminal",
      "Responsable": "Architecte Logiciel/Développeur"
    },
    "Indications": {
      "Degré de priorité": "3",
      "Mise en oeuvre": "3",
      "Impact écologique": "4",
      "Ressources Economisées": "Processeur / Mémoire vive"
    },
    "Description": "La délégation d’événements permet de ne pas surcharger la mémoire du navigateur en instanciant un seul écouteur pour plusieurs élé- ments du DOM (Document Object Model).",
    "Exemple": "L’élément du DOM dont l’ID est t est déclaré comme le délégué. \nIl intercepte les événements de tous ses fils.\n\n```\n<head>\n    // ...\n    <style type=\"text/css\">\n     #t { border: 1px solid red } #t1 { background-color: pink; }\n    </style>\n    <script type=\"text/javascript\">\n        function modifyText(new_text) {\n            var t2 = document.getElementById(\"t2\");\n            t2.ﬁrstChild.nodeValue = new_text;\n        }\n        function load() {\n            var el = document.getElementById(\"t\");\n            el.addEventListener(\"click\", function() {\n              modifyText(\"four\")\n            }, false); \n        }\n    </script>\n</head>\n<body onload=\"load();\">\n    <table id=\"t\">\n        <tr><td id=\"t1\"><button type=\"button\">one</button></td></tr>\n        <tr><td id=\"t2\"><button type=\"button\">two</button></td></tr>\n    </table>\n    <!-- ... -->\n</body>\n```",
    "Principe de validation": {
      "Le nombre ...": "d'écoutes (listeners) d'un même événement sur plusieurs éléments HTML, faisant partie d'un même groupe, sans utiliser la délégation d'événements",
      "est inférieur ou égal à": "0"
    },
    "source": "cnumr"
  },
  {
    "title": "Ne charger des données/du code que lorsqu'elles sont/il est nécessaire",
    "Identifiants": {
      "GreenIT": "",
      "V2": "",
      "V3": "",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "3. Réalisation (fabrication / développement)",
      "Tiers": "Utilisateur/Terminal",
      "Responsable": "Architecte Logiciel/Développeur"
    },
    "Indications": {
      "Degré de priorité": "4",
      "Mise en oeuvre": "3",
      "Impact écologique": "5",
      "Ressources Economisées": "Requêtes"
    },
    "Description": "Pour des raisons de performance perçue,\nil peut être tentant de précharger des ressources qui _pourraient_ être utilisée\nsi une action spécifique est effectuée par l'utilisateur\n(y compris une navigation vers une autre page).\n\nMais si cette action n'est pas entreprise,\nces préchargements n'auront servi qu'à gaspiller des ressources.",
    "Exemple": "Éviter `<link rel=\"prerender\">`,\nainsi que tous les `rel=\"preload\"`, `rel=\"prefetch\"`, `rel=\"preconnect\"`, `rel=\"modulepreload\"` et `rel=\"dns-prefetch\"`\ndont la ressource ne sera pas utilisée sur la page courante,\nou utilisée uniquement sous certaines conditions.\n\nÉviter les chargements et mise en cache (ou en stockage local) de données applicatives,\ncomme des listes des valeurs et autres référentiels,\nsi on n'est pas absoluement certain qu'elles seront utilisées.\n\nPar extension, découper le code JS, voire les CSS, par portions (_chunks_) relatives à des actions particulières de l'utilisateur,\net ne charger ces portions que lorsqu'elles sont nécessaires.\nC'est d'autant plus vrai pour les SPA (Single Page Applications),\noù chaque _écran_ (ou éventuellement ensemble d'écrans) pourra être ainsi chargé uniquement à la demande.",
    "Principe de validation": {
      "Le nombre ...": "de ressources chargées qui ne sont pas immédiatement utilisées",
      "est inférieur ou égal à": "0"
    },
    "source": "cnumr"
  },
  {
    "title": "Mettre en place une politique d'expiration et suppression des données",
    "Identifiants": {
      "GreenIT": "",
      "V2": "",
      "V3": "",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "4. Production",
      "Tiers": "Datacenter",
      "Responsable": "Administrateur systèmes"
    },
    "Indications": {
      "Degré de priorité": "4",
      "Mise en oeuvre": "3",
      "Impact écologique": "4",
      "Ressources Economisées": "Stockage / Requêtes"
    },
    "Description": "Depuis la mise en place du RGPD par la CNIL, il est obligatoire de supprimer les données personnelles d'un utilisateur\naprès une durée définie d'après plusieurs conditions. Il est obligatoire de le faire sur les données personnelles de nos\nutilisateurs, mais nous pouvons également définir une durée de vie pour toute autre donnée. Heureusement, organiser la \ndurée de vie de nos données peut-être effectué de manière automatique, sans avoir à purger manuellement les données obsolètes. \n\nDe nombreux systèmes de gestion de bases de données, comme `MongoDB` , `AWS DynamoDB`, `Redis` ou `Oracle` permettent de\ndéfinir un \"TTL\" sur une table ou sur une donnée.\nAprès avoir défini une durée de vie, les données expirées sont purgées et effacées définitivement de la base.",
    "Exemple": "Dans cet exemple en Java, sur une base Oracle, la durée de vie de la donnée expirera au bout de 5 jours\n\n```\nString aKey = \"myFirstKey\";\nString aData = \"myFirstData\";\n\ntry {\n    DatabaseEntry theKey = new DatabaseEntry(aKey.getBytes(\"UTF-8\"));\n    DatabaseEntry theData = new DatabaseEntry(aData.getBytes(\"UTF-8\"));\n\n    WriteOptions wo = new WriteOptions();\n    wo.setTTL(5); // TTL de 5 jours\n    myDatabase.put(null,             // Transaction \n                   theKey,           // Clé.\n                   theData,          // valeur.\n                   Put.NO_OVERWRITE, \n                   wo);              // Options (incluant la durée de TTL).\n\n} catch (Exception e) {\n    // ...\n} \n```",
    "Principe de validation": {
      "Le nombre ...": "de données stockées inutilisées et sans contrainte légale",
      "est inférieur ou égal à": "0"
    },
    "source": "cnumr"
  },
  {
    "title": "Préférer la pagination au défilement infini",
    "Identifiants": {
      "GreenIT": "",
      "V2": "",
      "V3": "",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "2. Conception",
      "Tiers": "Réseau",
      "Responsable": "UX/UI Designer"
    },
    "Indications": {
      "Degré de priorité": "3",
      "Mise en oeuvre": "4",
      "Impact écologique": "3",
      "Ressources Economisées": "Réseau / Stockage"
    },
    "Description": "Lorsqu'on affiche une liste de produits, d'articles, sur notre site, il est tentant de donner la possibilité au visiteur de tout voir en faisant simplement défiler la page en chargeant le contenu petit à petit.\nCet effet de style va générer le contenu pour l'afficher au fur et à mesure. Il va donc demander au serveur les x prochains articles/produits à chaque \"scroll\". Cela pourra entrainer des problèmes de performances, de référencement naturel et de respect de l'accessibilité web.\n\nMettez en place une pagination classique avec un système de filtre performant. Le visiteur trouvera plus facilement le contenu qui l'intéresse et les robots d'indexation aussi.\nCette bonne pratique facilite le respect du Référentiel Général d'Amélioration de l'Accessibilité (RGAA) introduit par la loi n° 2005-102 du 11 février 2005 pour l’égalité des droits et des chances, la participation et la citoyenneté des personnes handicapées  (cf. https://www.numerique.gouv.fr/publications/rgaa-accessibilite/obligations/\").",
    "Principe de validation": {
      "Le nombre  ...": "de listes sans une pagination classique",
      "est inférieur ou égal à": "10%"
    },
    "source": "cnumr"
  },
  {
    "title": "Ne pas afficher les documents à l'intérieur des pages",
    "Identifiants": {
      "GreenIT": "",
      "V2": "",
      "V3": "",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "3. Réalisation (fabrication / développement)",
      "Tiers": "Utilisateur/Terminal",
      "Responsable": "Utilisateur"
    },
    "Indications": {
      "Degré de priorité": "3",
      "Mise en oeuvre": "1",
      "Impact écologique": "4",
      "Ressources Economisées": "Réseau"
    },
    "Description": "Certains rédacteurs de contenu éprouvent parfois le besoin d'intégrer des documents à l'intérieur des pages, en visualisation directe.\nCela nécessite un développement spécifique pour une fonctionnalité malvenue.\nEn effet, le chargement d'un document, à l'intérieur d'un contenu, est non voulu par l'utilisateur si son système en permet l'affichage.\nDe plus à chaque consultation de la page, le fichier est téléchargé pour être affiché.",
    "Exemple": "Pour être affiché, un fichier de traitement de texte devra, par exemple, appeler un logiciel adapté. Or si ce logiciel n'est pas installé sur le poste de l'utilisateur, le fichier ne pourra pas être lu sans un développement spécifique coûteux.\nIl est donc préférable d'insérer un lien de téléchargement du document à l'intérieur de votre page afin que seuls les utilisateurs concernés le téléchargent.",
    "Principe de validation": {
      "Le nombre de ...": "documents affichés dans un contenu",
      "est inférieur ou égal à": "0"
    },
    "source": "cnumr"
  },
  {
    "title": "Utiliser certains forks applicatifs orientés \"performance\"",
    "Identifiants": {
      "GreenIT": "4",
      "V2": "53",
      "V3": "16",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "3. Réalisation (fabrication / développement)",
      "Tiers": "Datacenter",
      "Responsable": "Administrateur systèmes"
    },
    "Indications": {
      "Degré de priorité": "3",
      "Mise en oeuvre": "3",
      "Impact écologique": "3",
      "Ressources Economisées": "Processeur / Mémoire vive / Réseau"
    },
    "Description": "Les logiciels open source sont souvent « forkés » (dérivés) pour des raisons de performance. Or un gain de performance implique\ngénéralement une réduction en termes de consommation de ressources. Par conséquent, si un fork optimisé existe et offre \nun périmètre fonctionnel et technique suffisant pour votre projet, vous devez l’utiliser.",
    "Exemple": [
      "À Redis, préférer plutôt la version optimisée KeyDB."
    ],
    "Principe de validation": {
      "Le nombre ...": "de forks orientés performance est supérieur ou égal à",
      "est inférieur ou égal à": "1"
    },
    "source": "cnumr"
  },
  {
    "title": "Supprimer tous les warning et toutes les notices",
    "Identifiants": {
      "GreenIT": "51",
      "V2": "65",
      "V3": "70",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "4. Production",
      "Tiers": "Datacenter",
      "Responsable": "Administrateur systèmes"
    },
    "Indications": {
      "Degré de priorité": "2",
      "Mise en oeuvre": "3",
      "Impact écologique": "2",
      "Ressources Economisées": "Processeur / Stockage"
    },
    "Description": "Les warnings et notices ralentissent les serveurs d’applications tels que PHP, car ces derniers doivent retracer l’origine des erreurs et inscrire dans les différents journaux système les messages expliquant les problèmes rencontrés.",
    "Exemple": "Éviter :\n\n```\n<html>\n     <body>\n         <form method=\"post\" accept-charset=\"utf-8\">\n             <label>\n                 First Name\n                 <input type=\"text\" name=\"ﬁrst_name\" value=\"<?php print $_POST['ﬁrst_name'] ?>\" placeholder=\"\">\n            </label>     \n             <label>\n                  Last Name\n                  <input type=\"text\" name=\"last_name\" value=\"<?php print $_POST['last_name'] ?>\" placeholder=\"\">\n             </label>     \n         </form>\n     </body>\n</html>\n```\n\n`$_POST['ﬁrst_name']` et `$_POST['last_name']` font générer des notices car ils ne sont pas nécessairement définis.",
    "Principe de validation": {
      "Le nombre ...": "de warning et notice en production",
      "est inférieur ou égal à": "0"
    },
    "source": "cnumr"
  },
  {
    "title": "Éviter le transfert d'une grande quantité de données pour réaliser un traitement",
    "Identifiants": {
      "GreenIT": "58",
      "V2": "75",
      "V3": "76",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "2. Conception",
      "Tiers": "Réseau",
      "Responsable": "Architecte Logiciel/Développeur"
    },
    "Indications": {
      "Degré de priorité": "3",
      "Mise en oeuvre": "3",
      "Impact écologique": "3",
      "Ressources Economisées": "Processeur / Mémoire vive / Réseau"
    },
    "Description": "Les systèmes de gestions de base données sont conçus et optimisés pour répondre efficacement aux traitements de grandes quantités de données.\nDans le cas de traitements avec une logique plus ou moins complexe, il est déconseillé de récupérer les données \"brutes\" et de réaliser toutes les opérations de calcul, de transformation ou encore d'agrégation côté serveur backend voire frontend.\n\nCes traitements doivent plutôt être réalisés au plus près de la donnée afin de:\n\n['limiter la bande passante à cause du transfert de données non traitées', 'profiter des optimisations de la base données sur la manipulation des données', \"d'alléger le cycle CPU côté serveur backend voire frontend \"]",
    "Exemple": "Dans le cas de requêtes complexes avec un nombre important de données et de l'utilisation d'un système de gestion de base de données relationnelles (SGBDR), il est conseillé d'utiliser des procédures stockées car:\n\n['une procédure stockée économise au serveur l’interprétation de la requête puisqu’elle est précompilée ;', 'une procédure stockée est moins gourmande en bande passante puisqu’il y a moins d’informations échangées entre le serveur et le client.']\n\nTous les SGBDR récents (SQL Server, MySQL, PostgreSQL, etc.) prennent en charge les procédures stockées.",
    "Principe de validation": {
      "Le nombre ...": "de traitements avec une grande quantité de données exécutés en dehors du serveur de base de données",
      "est inférieur ou égal à": "1"
    },
    "source": "cnumr"
  },
  {
    "title": "Afficher des pages d'erreur statiques",
    "Identifiants": {
      "GreenIT": "46",
      "V2": "98",
      "V3": "96",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "2. Conception",
      "Tiers": "Réseau",
      "Responsable": "Architecte Logiciel/Développeur"
    },
    "Indications": {
      "Degré de priorité": "3",
      "Mise en oeuvre": "3",
      "Impact écologique": "3",
      "Ressources Economisées": "Processeur / Mémoire vive / Réseau / Stockage"
    },
    "Description": "Les pages d'erreurs (40x, 50x) doivent être les plus légères possibles, et même idéalement inexistantes. En effet, lorsque le navigateur demande une ressource qui n’existe pas (image, feuille de styles CSS, fichier JavaScript, etc.) ou que le serveur renvoie une erreur, la page d'erreur renvoyée peut être plus lourde que la ressource ou la page demandée.\n\nDe plus, certains CMS exécutent leur routine de recherche de contenu (dans la base de données) pour tenter de trouver une ressource demandée. Par conséquent, du code serveur est exécuté, le serveur de base de données est sollicité, et la génération dynamique de la page HTML est exécutée. Tout ce processus aboutit à un gaspillage de cycles CPU, de mémoire vive et de bande passante.",
    "Exemple": "Éviter les pages 404 dynamiques, qui sont personnalisées en fonction du contenu de l’URL. Préférer une page 404 statique.",
    "Principe de validation": {
      "Le nombre ...": "de pages d'erreur dynamiques",
      "est inférieur ou égal à": "0"
    },
    "source": "cnumr"
  },
  {
    "title": "Optimiser les requêtes aux bases de données",
    "Identifiants": {
      "GreenIT": "59",
      "V2": "74",
      "V3": "75",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "3. Réalisation (fabrication / développement)",
      "Tiers": "Datacenter",
      "Responsable": "Architecte Logiciel/Développeur"
    },
    "Indications": {
      "Degré de priorité": "3",
      "Mise en oeuvre": "3",
      "Impact écologique": "3",
      "Ressources Economisées": "Processeur / Mémoire vive / Réseau"
    },
    "Description": "La base de données est en général un composant essentiel des applications et les requêtes effectuées pour récupérer\net enregistrer des données sont nombreuses; exécutées fréquemment, elles ont une influence importante sur la consommation de \nressources de la solution.\n\nDans cette optique il est important de prêter attention à ces requêtes et de valider, au moins pour celles qui coûtent le\nplus, qu'elles sont bien optimisées.\n\nLes pistes classiques d'optimisation sont : \n\n[\"Ramener moins de données et se limiter au nécessaire. Par exemple, pour les bases relationnelles, la clause `LIMIT` limite le nombre de lignes du résultat. Quand c'est possible, l'utiliser permet de réduire la quantité de données transférées. Le gain en performance sera d’autant plus important si les enregistrements contiennent un grand nombre de champs volumineux.\", \"N'utiliser que les champs qui sont nécessaires dans les tables ou documents utilisés. Afin de ne pas transférer inutilement des données qui ne seront pas utilisées, et de ne pas utiliser des ressources du serveur de base de données et du serveur d'application pour les manipuler.\", \"Ajouter des index sur les champs utilisés comme clefs. Ceux-ci dépendent de votre modèle. Leur ajout peut complètement changer les performances d'une requête. Attention, ajouter un index rend l'écriture plus longue, car il faut le mettre à jour pour les documents ajoutés, modifiés ou supprimés. Il faut le faire si on a plus de lectures que d'écritures ou si la lecture est particulièrement couteuse.\", \"Utiliser les outils du système de gestion de base de données permettant d'analyser les requêtes pour identifier les points d'amélioration, `EXPLAIN` par exemple pour un SGBDR.\", 'Conserver en cache le résultat des requêtes les plus couteuses, ainsi que les données qui changent peu ou jamais (données de référence).', 'Éventuellement, modifier le modèle de données pour pouvoir accéder plus facilement aux informations sans jointures (dénormalisation)']",
    "Exemple": "Voici un premier exemple, avec la clause `LIMIT` :\n\nSi vous ne souhaitez afficher que les 25 premiers enregistrements d’une table contenant le nom et le prénom de personnes, remplacer lors de la sélection :\n\n```\nSELECT prenom, nom FROM personnes\n```\n\npar :\n\n```\nSELECT prenom, nom FROM personnes LIMIT 0, 25\n```\n\nAutre exemple, avec la création d'un index : \n\n```\nCREATE INDEX idx_personnes_nom_prenom ON personnes(nom, prenom)\n```\n\nSuite à cette commande, le système de gestion de base de données pourra retrouver plus rapidement les lignes de `personnes` à partir des informations (nom, prenom).",
    "Principe de validation": {
      "Le nombre ...": "de requêtes peu performantes identifiées non optimisées",
      "est inférieur ou égal à": "0"
    },
    "source": "cnumr"
  },
  {
    "title": "Optimiser les images",
    "Identifiants": {
      "GreenIT": "21",
      "V2": "76",
      "V3": "80",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "3. Réalisation (fabrication / développement)",
      "Tiers": "Utilisateur/Terminal",
      "Responsable": "Utilisateur"
    },
    "Indications": {
      "Degré de priorité": "4",
      "Mise en oeuvre": "3",
      "Impact écologique": "4",
      "Ressources Economisées": "Réseau / Requêtes /  Stockage"
    },
    "Description": "Les images représentent souvent la majorité des octets téléchargés, après les vidéos et juste avant les bibliothèques CSS et JavaScript.\nLeur optimisation est donc cruciale pour réduire la bande passante consommée. La première étape consiste à choisir le format idéal\nà vos besoins d'affichage. \n\nLes images matricielles doivent être réservées essentiellement aux photos et aux éléments de l’interface qui ne peuvent \npas être pris en charge par des icônes ou des styles CSS.\n\nLe choix du format dépend des caractéristiques de l’image : noir et blanc ou couleur, palette de couleurs, \nbesoin de transparence… Parmi ces caractéristiques, le fait de pouvoir dégrader l’image définitivement (lossy) oriente \nplutôt vers les formats `JPEG`, `JPEG XL`, `AVIF` ou `WebP`, tandis qu’un besoin de transparence et/ou l’impossibilité de dégrader \nl’image (lossless) orientera plutôt vers un format `PNG` ou `WebP lossless` (qui supporte la transparence).\n\nLe poids des images est beaucoup impacté par le format que vous allez choisir : en moyenne, une image `.webp` sera 30% plus légère\nqu'une image `.jpeg` ou qu'une image `.png`. Une image `.avif` sera jusqu'à 20% plus légère qu'une image `.webp` et 50% plus légère \nqu'une image `.jepg`.\n\nN'oubliez pas de faire attention à la prise en charge de ces formats d'image sur les navigateurs. Une image `.webp`\nne sera pas reconnu par un navigateur ancien, et ne s'affichera pas. Pour palier à cette problématique, il est possible de \nfournir au navigateur plusieurs formats pour la même image. \nCertains modules coté serveur (comme le [modPageSpeed](https://www.modpagespeed.com/) de google, disponible pour Apache et NGINX) \npermettent même de fournir l'image idéale en rapport au navigateur appelant le serveur.\n\nDe nombreux outils vous aideront à réduire au minimum le poids des images :\n\n['[SQUOOSH](https://squoosh.app)', '[CLOUDINARY](https://webspeedtest.cloudinary.com/)', '[ImageMagick](https://imagemagick.org/)', '[PngCrush](https://pmt.sourceforge.io/pngcrush/)', 'JpegTran ']",
    "Exemple": "Dans cet exemple, l'élement `<picture>` du DOM indique au navigateur qu'il y a deux images : une image `.webp` et une image\n`.jpg`, celle par défaut. Le navigateur décidera quelle image télécharger, s'il supporte le format `.webp` il téléchargera l'image \n`image.webp` sinon, il téléchargera l'image `image.jpg`\n\n```\n<picture>\n    <source srcset=\"image.webp\" type=\"image/webp\">\n    <img src=\"image.jpg\" alt=\"...\" loading=\"lazy\">\n</picture>\n```\n\nPour aller plus loin :\n\n['https://web.dev/choose-the-right-image-format/', 'https://www.fasterize.com/fr/blog/webp-avif-compresser-images/']",
    "Principe de validation": {
      "Le nombre ...": "d'images non optimisées",
      "est inférieur ou égal à": "0"
    },
    "source": "cnumr"
  },
  {
    "title": "Mettre en place un \"Circuit breaker\"",
    "Identifiants": {
      "GreenIT": "",
      "V2": "",
      "V3": "",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "2. Conception",
      "Tiers": "Datacenter",
      "Responsable": "Architecte Logiciel/Développeur"
    },
    "Indications": {
      "Degré de priorité": "2",
      "Mise en oeuvre": "2",
      "Impact écologique": "2",
      "Ressources Economisées": "Processeur / Réseau / Requêtes"
    },
    "Description": "Un \"circuit breaker\" casse le traitement d'une requête à travers plusieurs services dans le cas où un des services ne répond pas.\nDes requêtes provenant des terminaux utilisateurs peuvent solliciter des services utiles et aussi pour lesquels un mode dégradé est acceptable.\nIls sont qualifiés de non critiques.\nEn fonction d’un certain nombre de critères d’erreur (timeout, nombre d’erreurs), le service appelant un service non critique\npeut désactiver cet appel et renvoyer immédiatement une réponse alternative.\nCe pattern permet de ne pas solliciter inutilement un service et le réseau.",
    "Exemple": "Sur un site e-commerce les informations détaillées d'une fiche produit peuvent être fournies par un service dédié. \nLe service principal qui récupère une page produit a \"appris\" que le service des informations détaillées était en erreur, il évite alors\nde l'appeler inutilement tant qu'il ne répond pas favorablement et ne renvoie donc pas cette information à l'utilisateur final.\nLe service reste opérationnel bien que l'expérience soit dégradée.",
    "Principe de validation": {
      "Le nombre ...": "de \"circuit breaker\" non mis en place sur des services non critiques",
      "est inférieur ou égal à": "0"
    },
    "source": "cnumr"
  },
  {
    "title": "Fournir une CSS print",
    "Identifiants": {
      "GreenIT": "16",
      "V2": "30",
      "V3": "27",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "3. Réalisation (fabrication / développement)",
      "Tiers": "Utilisateur/Terminal",
      "Responsable": "UX/UI Designer"
    },
    "Indications": {
      "Degré de priorité": "3",
      "Mise en oeuvre": "4",
      "Impact écologique": "3",
      "Ressources Economisées": "Réseau"
    },
    "Description": "Outre le service apporté à l’internaute, cette feuille de styles réduit le nombre de pages imprimées, \net donc indirectement l’empreinte écologique du site web. La plus dépouillée possible, elle doit proposer une police\nde caractères économe en encre (Century Gothic, par exemple). Pensez aussi à masquer le header, le footer, le menu, le sidebar,\nsupprimer toutes les images sauf celles du contenu, etc.",
    "Exemple": "Cette CSS print « nettoie » la page affichée à l’écran afin de proposer une impression épurée :\n\n```\nbody {\nbackground-color :#ﬀf; font-family :Serif; font-size :15pt;\n}\n#page { margin :0;\nborder :none;\n}\n#banner, #menuright, #footer { display :none;\n}\nh1#top { margin :0;\npadding :0;\ntext-indent :0; line-height :25pt; font-size :25pt;\n} (...)\n```",
    "Principe de validation": {
      "Le nombre ...": "de CSS print manquante",
      "est inférieur ou égal à": "1"
    },
    "source": "cnumr"
  },
  {
    "title": "Éliminer les fonctionnalités non utilisées",
    "Identifiants": {
      "GreenIT": "",
      "V2": "",
      "V3": "",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "1. Spécification",
      "Tiers": "Utilisateur/Terminal",
      "Responsable": "PO/AMOA"
    },
    "Indications": {
      "Degré de priorité": "5",
      "Mise en oeuvre": "3",
      "Impact écologique": "5",
      "Ressources Economisées": "Processeur / Mémoire vive / Stockage / Réseau / Requêtes"
    },
    "Description": "Éliminer les fonctionnalités non utilisées consiste à :\n\n[\"Mesurer l'utilisation des fonctionnalités en production.\", 'Piloter l’usage des fonctionnalités, et à supprimer celles qui ne sont pas assez utilisées ou qui ont perdu de la valeur.']\n\nSupprimer des fonctionnalités allège le poids de l’application, son impact en production et sa maintenance.\n\nComment supprimer une fonctionnalité ?\n\n[\"la désactiver : sur le principe du feature flipping, empêcher qu'elle soit utilisée avec un flag.\", 'la désinstaller : supprimer au maximum le code utilisé puis refactorer le code restant.']\n\nEn fonction du coût environnemental et économique d’une suppression, l'une ou l'autre solution sera retenue.",
    "Exemple": "Un site e-commerce utilise deux listes différentes : liste de courses et liste de favoris. Lors de la refonte du site, au lieu de rester iso-fonctionnel, l’équipe mesure la pertinence des fonctionnalités. La mesure montre que la liste de favoris est devenue désuète. Elle est donc supprimée ainsi que toutes les données en base.\n\nUne page d’administration peut être utilisée une fois par an et être très importante (par exemple une purge de cache qui est utilisée uniquement en cas de mise à jour de référentiel). Dans ce cas, elle doit être conservée.",
    "Principe de validation": {
      "Le nombre ...": "de fonctionnalités peu utilisées présentent en production",
      "est inférieur ou égale à": "10%"
    },
    "source": "cnumr"
  },
  {
    "title": "Éviter la lecture et le chargement automatique des vidéos et des sons",
    "Identifiants": {
      "GreenIT": "",
      "V2": "",
      "V3": "",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "5. Utilisation",
      "Tiers": "Utilisateur/Terminal",
      "Responsable": "Architecte Logiciel/Développeur"
    },
    "Indications": {
      "Degré de priorité": "4",
      "Mise en oeuvre": "3",
      "Impact écologique": "4",
      "Ressources Economisées": "Processeur / Réseau / Requêtes"
    },
    "Description": "L'activation automatique des vidéos et des sons (auto play) au chargement des pages web implique une utilisation de ressources sur chaque tiers (terminal, réseau, datacenter).\nDans de nombreux cas, la lecture automatique n'est pas nécessaire.\nD'autre part, elle attire l'attention de l'utilisateur et peut le détacher du service qui était demandé.\nCes lectures doivent donc dans la mesure du possible se faire à la demande de l'utilisateur en ne mettant pas en place l'attribut `autoplay` dans les balises `<video>` ou `<audio>`. \n\nDe plus, même en n'activant pas l'autoplay, certaines parties de la vidéo ou du fichier audio peuvent être téléchargées. \nSi l'utilisateur ne lance pas la lecture de la vidéo, ces données seront téléchargées inutilement. \nIl convient alors de forcer le navigateur à ne rien précharger en définissant la valeur de l'attribut `preload` des balises `<video>` ou `<audio>` à `none`.",
    "Exemple": "Vidéo:\n\n```\n<video src=\"fichiervideo.webm\" preload=\"none\"></video>\n```\n\nAudio:\n\n```\n<audio controls src=\"fichieraudio.mp3\" preload=\"none\"></audio>\n```",
    "Principe de validation": {
      "Le nombre ...": "d'éléments `<vidéo>` ou `<audio>` sans un attribut `preload=\"none\"` ou `autoplay`",
      "est inférieur ou égal à": "0"
    },
    "source": "cnumr"
  },
  {
    "title": "Utiliser un serveur asynchrone",
    "Identifiants": {
      "GreenIT": "77",
      "V2": "94",
      "V3": "97",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "4. Production",
      "Tiers": "Datacenter",
      "Responsable": "Administrateur systèmes"
    },
    "Indications": {
      "Degré de priorité": "3",
      "Mise en oeuvre": "3",
      "Impact écologique": "4",
      "Ressources Economisées": "Processeur / Mémoire vive"
    },
    "Description": "Les serveurs (web, d’applications, etc.) tels que NGINX, node.js ou Gwan sont conçus pour utiliser le minimum de ressources possible. Grâce à leur fonctionnement en mode asynchrone, ils ne sont pas tenus de créer un processus ou un thread pour chaque requête. Ils évitent ainsi de gaspiller leurs ressources.\n\nAlors que la plupart des serveurs web augmentent leur consommation de mémoire vive au fur et à mesure des sollicitations, les serveurs asynchrones demeurent eux très stables.",
    "Exemple": "NGINX a la réputation d’être plus performant qu’Apache. Il peut ainsi servir 2,1 fois plus de requêtes par seconde que ce serveur.\n\nPour aller plus loin :\n\n['https://nbonvin.wordpress.com/2011/03/14/apache-vs-nginx-vs-varnish-vs-gwan', 'https://nbonvin.wordpress.com/2011/03/24/serving-small-static-files-which-server-to-use']",
    "Principe de validation": {
      "Le nombre ...": "de serveurs applicatifs synchrones",
      "est inférieur ou égal à": "1"
    },
    "source": "cnumr"
  },
  {
    "title": "Choisir les technologies les plus adaptées",
    "Identifiants": {
      "GreenIT": "1",
      "V2": "11",
      "V3": "15",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "3. Réalisation (fabrication / développement)",
      "Tiers": "Datacenter",
      "Responsable": "Architecte Logiciel/Développeur"
    },
    "Indications": {
      "Degré de priorité": "4",
      "Mise en oeuvre": "4",
      "Impact écologique": "5",
      "Ressources Economisées": "Processeur / Mémoire vive / Réseau"
    },
    "Description": "Le choix des technologies étant primordial pour optimiser les ressources, sélectionner l’outil le plus économe en fonction de ses besoins\net de ses contraintes métier.\n\nDans la mesure du possible, il faut privilégier un site statique dont le contenu change très peu, pourra être mis en cache et ne sollicitera pas de serveur d'application ou de base de données.\n\nDans le cas d'un site plus dynamique, le sur-mesure permet plus de souplesse dans l'optimisation technique et d'embarquer le strict nécessaire pour répondre au besoin métier.\n\nSi vous avez une partie d'un site web qui repose sur un nombre de pages très limité et qui délivre un service métier encadré (tunnel de commande, demande de devis) l'utilisation d'une SPA (Single Page Application) peut être recommandée. Cela permet de limiter les aller retours avec le serveur et rendre l'expérience plus fluide et performante.",
    "Exemple": "Un site institutionnel avec uniquement une présentation de l'entreprise et un formulaire de contact devra privilégier un site statique étant donné la faible fréquence de mise à jour. ",
    "Principe de validation": {
      "Le nombre ...": "de technologies inopportunes",
      "est inférieur ou égal à": "1"
    },
    "source": "cnumr"
  },
  {
    "title": "Mettre en cache les réponses Ajax",
    "Identifiants": {
      "GreenIT": "91",
      "V2": "107",
      "V3": "102",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "4. Production",
      "Tiers": "Utilisateur/Terminal",
      "Responsable": "Architecte Logiciel/Développeur"
    },
    "Indications": {
      "Degré de priorité": "3",
      "Mise en oeuvre": "2",
      "Impact écologique": "4",
      "Ressources Economisées": "Réseau / Requêtes"
    },
    "Description": "Les réponses Ajax qui seront inchangées dans un futur proche ne doivent pas être redemandées au serveur. Par conséquent, les mettre en cache pour économiser de la bande passante.",
    "Exemple": "Si une requête Ajax retourne une liste de noms de villes, de noms de contacts ou tout élément non calculé, il faut mettre ces réponses en cache du côté client pour ne pas générer à nouveau une requête vers le serveur.",
    "Principe de validation": {
      "Le nombre ...": "de réponses AJAX non mises en cache",
      "est inférieur ou égal à": "10%"
    },
    "source": "cnumr"
  },
  {
    "title": "Limiter le nombre de requêtes HTTP",
    "Identifiants": {
      "GreenIT": "180",
      "V2": "9",
      "V3": "9",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "3. Réalisation (fabrication / développement)",
      "Tiers": "Réseau",
      "Responsable": "Architecte Logiciel/Développeur"
    },
    "Indications": {
      "Degré de priorité": "4",
      "Mise en oeuvre": "3",
      "Impact écologique": "4",
      "Ressources Economisées": "Réseau / Requêtes"
    },
    "Description": "Le temps de chargement d’une page côté navigateur est directement corrélé au nombre de fichiers que le navigateur doit télécharger,\net au poids unitaire de chaque fichier.\n\nPour chaque fichier, le navigateur émet un GET HTTP vers le serveur.\n\nIl attend sa réponse, puis télécharge la ressource dès qu’elle est disponible. Selon le type de serveur web que vous utilisez,\nplus le nombre de requêtes par page est important, moins vous pourrez servir de pages par serveur. \nDiminuer le nombre de requêtes par page est crucial pour réduire le nombre de serveurs HTTP (voire des serveurs d'application et de base de données) nécessaires au fonctionnement du site,\net donc les impacts environnementaux associés.",
    "Exemple": "Pour afficher des petits drapeaux pour le choix d'une langue, l'utilisation d'une spritesheet CSS permet de les regrouper dans une seule image de plus grande taille.\nCe procédé réduit le nombre de requêtes HTTP.",
    "Principe de validation": {
      "Le nombre ...": "de requêtes HTTP",
      "est inférieur ou égal à": "40"
    },
    "source": "cnumr"
  },
  {
    "title": "Écrire des sélecteurs CSS efficaces",
    "Identifiants": {
      "GreenIT": "13",
      "V2": "27",
      "V3": "24",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "3. Réalisation (fabrication / développement)",
      "Tiers": "Réseau",
      "Responsable": "Architecte Logiciel/Développeur"
    },
    "Indications": {
      "Degré de priorité": "3",
      "Mise en oeuvre": "3",
      "Impact écologique": "2",
      "Ressources Economisées": "Processeur"
    },
    "Description": "Privilégier les sélecteurs basés sur des ID ou des classes. Ils seront ainsi filtrés plus rapidement, économisant des cycles CPU à la machine interprétant les règles.",
    "Exemple": "Ne pas écrire :\n\n```\ntreeitem[mailfolder=\"true\"] > treerow > treecell {…}\n```\n\nmais plutôt :\n\n```\n.treecell-mailfolder {…}\n```\n\nNe pas écrire :\n\n```\ntreehead > treerow > treecell {…}\n```\n\nmais plutôt :\n\n```\n.treecell-header {…}\n```",
    "Principe de validation": {
      "Le nombre ...": "de sélecteurs CSS qui n'utilisent ni d'id, ni de class et ni d'attribut",
      "est inférieur ou égal à": "0"
    },
    "source": "cnumr"
  },
  {
    "title": "Sécuriser l'accès à l'administration",
    "Identifiants": {
      "GreenIT": "",
      "V2": "",
      "V3": "",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "3. Réalisation (fabrication / développement)",
      "Tiers": "Utilisateur/Terminal",
      "Responsable": "Utilisateur"
    },
    "Indications": {
      "Degré de priorité": "2",
      "Mise en oeuvre": "2",
      "Impact écologique": "3",
      "Ressources Economisées": "Réseau"
    },
    "Description": "Lors de l'utilisation de CMS largement connus, le chemin d'accès à l'administration du site est souvent identique d'un site à l'autre.\nCette remarque est vraie pour tous les sites utilisant une interface d'administration avec un chemin d'accès classique.\nDe ce fait, les attaques de type \"brute force\" sont très fréquentes dès lorsqu'une url facile est trouvée.\nCes attaques sont très impactantes pour le réseau et les infrastructures.\n\nLes attaques aboutissent d'autant plus lorsque l'identifiant d'un utilisateur est classique lui aussi ou que les mots de passe ne sont pas assez forts.",
    "Exemple": "WordPress, un des CMS les plus utilisés du marché propose son administration sur l'url : /wp-admin ou /wp-login.php\nJoomla lui propose /administrator\nPour Kirby, il s'agit de /panel\netc...\n\nIl est toujours possible de modifier cette adresse pour limiter les attaques et mieux garantir la sécurité de votre site.\nRemplacez l'url d'accès aux pages d'administration par :\n\n['une chaine aléatoire sans majuscule  : /ze62ane96,  /o6_jhej639, /dj5zjaih2-ep8e', 'un ou plusieurs mots en rapport avec votre activité : /construire,  /jouer, /preparer-le-menu', 'ou cumuler les deux : /jouer_562fg6']\n\nNe pas utiliser comme identifiant \"admin\", \"nom de domaine du site\", \"prénom ou nom du dirigeant de l'entreprise\"\nUn mot de passe sécurisé comporte au moins 8 caractères dont : des lettres minuscules et majuscules, des caractères spéciaux et des chiffres.\nIl est possible d'utiliser aussi le générateur de mot de passe de la cnil: [https://www.cnil.fr/fr/generer-un-mot-de-passe-solide](https://www.cnil.fr/fr/generer-un-mot-de-passe-solide)",
    "Principe de validation": {
      "Le nombre ...": "d'urls d'administration par défaut et d'identifiants classiques et de mots de passe faibles",
      "est inférieur ou égal à": "0"
    },
    "source": "cnumr"
  },
  {
    "title": "Fournir une alternative textuelle aux contenus multimédias",
    "Identifiants": {
      "GreenIT": "",
      "V2": "",
      "V3": "",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "3. Réalisation (fabrication / développement)",
      "Tiers": "Utilisateur/Terminal",
      "Responsable": "Utilisateur"
    },
    "Indications": {
      "Degré de priorité": "4",
      "Mise en oeuvre": "3",
      "Impact écologique": "5",
      "Ressources Economisées": "Réseau"
    },
    "Description": "Le texte, même mise en forme en HTML/CSS, utilise beaucoup moins de bande passante que des formats multimédias comme l'audio ou la vidéo. \nFournir aux utilisateurs une alternative textuelle à ces contenus leur permet s'ils le souhaitent de lire plutôt que d'écouter ou de visionner, et donc de transférer moins de données.\nSi cette alternative textuelle a elle même une taille importante, elle peut ne pas etre chargée par défaut mais suite à une action utilisateur.\n\nCette pratique est également bénéfique pour l'accessibilité : les mal entendants pourront lire le contenu et y auront donc accès, de même pour les mal voyants, si le texte inclut une description des éléments des vidéos qui ne sont que visibles.\n\nCette pratique est également bénéfique pour le référencement, les moteurs de recherches pouvant plus facilement analyser le texte que l'audio et la vidéo.\n\nVoir aussi sur le même sujet la pratique « Eviter la lecture automatique des vidéo et des sons »",
    "Exemple": "Une video de 30 minutes va typiquement faire 500mo, un podcast de la même durée fera 30mo, et l'équivalent texte moins d'1 mo.",
    "Principe de validation": {
      "Le nombre ...": "de fichiers multimédias sans alternative textuelle",
      "est inférieur ou égal à": "10%"
    },
    "source": "cnumr"
  },
  {
    "title": "Remplacer les boutons officiels de partage des réseaux sociaux",
    "Identifiants": {
      "GreenIT": "910",
      "V2": "",
      "V3": "19",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "3. Réalisation (fabrication / développement)",
      "Tiers": "Utilisateur/Terminal",
      "Responsable": "UX/UI Designer"
    },
    "Indications": {
      "Degré de priorité": "4",
      "Mise en oeuvre": "4",
      "Impact écologique": "4",
      "Ressources Economisées": "Réseau / Requêtes"
    },
    "Description": "Les principaux réseaux sociaux tels que Facebook, Twitter, Pinterest, etc. fournissent des plugins à installer sur une page web\npour y afficher un bouton Partager et un compteur de J’aime. Ces plugins JavaScript sont très gourmands en ressources : \npour fonctionner, ils nécessitent un grand nombre de requêtes et de télécharger des fichiers lourds. \nMieux vaut leur préférer des liens directs, en HTML, vers les pages de partage. \nOn peut générer ces liens à la main (voir ci-dessous) ou via un outil tel que https://www.sharelinkgenerator.com/.",
    "Exemple": "Les réseaux sociaux possèdent tous une URL qui permet à leurs membres de partager une page web :\n\n['Facebook Share : https://www.facebook.com/sharer/sharer.php?u=XXXXX', 'Facebook Like : https://www.facebook.com/plugins/like.php?href=XXXXX', 'Twitter : https://twitter.com/intent/tweet?url=XXXXX\\nOn peut donc facilement ajouter un bouton qui ouvre une pop-up de partage comme le font les boutons officiels, par exemple avec le code suivant :']\n\n```\n<button type = \"button\" onclick = \"window. open('https://www.facebook.com/ sharer/sharer.php?u=XXXXX', '', 'menubar = no, toolbar = no, resizable = yes, scrollbars = yes, height = 500, width = 700')\">\n    Je partage cette page sur Facebook\n</button>\n```\n\nPour aller plus loin :\nhttps://www.nuweb.fr/736",
    "Principe de validation": {
      "Le nombre ...": "de librairies externes",
      "est inférieur ou égal à": "0"
    },
    "source": "cnumr"
  },
  {
    "title": "Réduire au maximum le repaint (appearence) et le reflow (layout)",
    "Identifiants": {
      "GreenIT": "42",
      "V2": "45",
      "V3": "43",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "3. Réalisation (fabrication / développement)",
      "Tiers": "Utilisateur/Terminal",
      "Responsable": "Architecte Logiciel/Développeur"
    },
    "Indications": {
      "Degré de priorité": "4",
      "Mise en oeuvre": "4",
      "Impact écologique": "4",
      "Ressources Economisées": "Processeur"
    },
    "Description": "Le repaint est le changement d’apparence d’un élément du DOM (Document Object Model), tandis que le reﬂow est le changement/ recalcul de la position des éléments dans le DOM. Ces deux opérations sont coûteuses en ressources, notamment en cycles CPU : il faut donc éviter de les déclencher.",
    "Exemple": "Pour éviter les repaint, ne pas modifier les propriétés stylistiques d’un élément (couleur de fond, style de bordure, couleur du texte, taille, etc.).\n\nPour éviter les reﬂow, limiter les changements de propriétés de position, de dimension, de type de positionnement, de contenu, etc. Cette suggestion est notamment valable pour certains éléments HTML tels que les tables, dont le reﬂow peut nécessiter jusqu’à trois fois plus de temps qu’un élément équivalent avec un block display.\n\nPour aller plus loin :\nhttps://developers.google.com/speed/articles/reflow",
    "Principe de validation": {
      "Le nombre ...": "de modifications n'affectant pas le layout et occasionnant un repaint (ex: color, background, visibility)",
      "est inférieur ou égal à": "1"
    },
    "source": "cnumr"
  },
  {
    "title": "Avoir une stratégie de fin de vie des contenus",
    "Identifiants": {
      "GreenIT": "",
      "V2": "",
      "V3": "",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "7. Fin de vie",
      "Tiers": "Datacenter",
      "Responsable": "Utilisateur"
    },
    "Indications": {
      "Degré de priorité": "3",
      "Mise en oeuvre": "4",
      "Impact écologique": "3",
      "Ressources Economisées": "Stockage"
    },
    "Description": "Les contenus multimédias (images, sons, vidéos) peuvent permettre d'améliorer l'expérience utilisateur et de rendre le service plus efficacement.\nSur des sites web où l'information est vivante (ex: e-commerce, journalistique, événementiels), ces contenus sont très utilisés.\nAvec un poids plus important que le texte, ils sont à utiliser avec raison et à optimiser lors du transfert aux terminaux utilisateurs.\nLorsqu'ils sont dépubliés, c'est à dire inaccessibles à l'utilisateur, continuer à les stocker n'a dans la plupart du temps pas d'intérêt d'un point\nde vue métier. C'est pourquoi, il convient de mettre en place une politique de suppression de ces contenus afin d'éviter la sollicitation inutile\nde stockage et permettre la libération d'espace pour de nouveaux contenus.",
    "Exemple": "",
    "Solution alternative": "",
    "Principe de validation": {
      "Le nombre ...": "de contenus stockés et non accessibles sur les pages web",
      "est inférieur ou égal à": "0"
    },
    "source": "cnumr"
  },
  {
    "title": "Proposer un traitement asynchrone lorsque c'est possible",
    "Identifiants": {
      "GreenIT": "112",
      "V2": "8",
      "V3": "8",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "2. Conception",
      "Tiers": "Réseau",
      "Responsable": "Architecte Logiciel/Développeur"
    },
    "Indications": {
      "Degré de priorité": "4",
      "Mise en oeuvre": "3",
      "Impact écologique": "4",
      "Ressources Economisées": "Mémoire vive / Réseau / Requêtes"
    },
    "Description": "Lorsque l’interaction avec l’utilisateur induit un traitement lourd et long côté serveur, proposer un traitement asynchrone lorsque c’est possible.\nL’idée est d’encourager l’utilisateur à déclencher le traitement, puis à se reconnecter quand celui-ci est terminé sans attendre sur son terminal la fin de l'exécution; \npar exemple, via la réception d’un e-mail contenant un lien.\nCette approche permet de réaliser des traitements par lots (batchs), souvent plus efficients en ressources que des traitements synchrones à la volée.\nOn libère ainsi les serveurs de présentation, qui peuvent prendre en charge d’autres internautes pendant que le traitement s’effectue en mode asynchrone côté serveur.\nIl est également plus aisé de lisser la charge du serveur responsable du traitement, ce qui permet une meilleure mutualisation de serveurs et par conséquent moins de serveurs.",
    "Exemple": "Dans le cas d’un service en ligne de conversion de documents bureautiques, inciter l’utilisateur à déposer ses fichiers en une seule fois, puis l’avertir par e-mail lorsque le traitement est terminé. Pour optimiser le processus, l’ensemble des fichiers peut être regroupé et compressé dans une archive.",
    "Principe de validation": {
      "Le nombre ...": "de traitements synchrones qui prennent plus d'une minute",
      "est inférieur ou égal à": "0"
    },
    "source": "cnumr"
  },
  {
    "title": "Adapter la qualité de service et le niveau de disponibilité",
    "Identifiants": {
      "GreenIT": "501",
      "V2": "86",
      "V3": "88",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "4. Production",
      "Tiers": "Datacenter",
      "Responsable": "Administrateur systèmes"
    },
    "Indications": {
      "Degré de priorité": "3",
      "Mise en oeuvre": "2",
      "Impact écologique": "4",
      "Ressources Economisées": "Consommation électrique"
    },
    "Description": "La qualité de service (QoS pour Quality of Service) et le niveau de disponibilité (SLA pour Service Level Agreement) doivent être déterminés avec les utilisateurs du site web ou du service en ligne. Il est par exemple inutile d’héberger le service dans un centre de données très haute disponibilité (Tier IV) si les utilisateurs acceptent un taux de disponibilité inférieur ou égal à 99 % pour un service non critique. En effet, à efficience énergétique équivalente, plus le centre de données qui héberge le site ou service en ligne est disponible, plus son empreinte environnementale globale est élevée, notamment parce que tout est redondé et actif : deux chaînes d’alimentation électrique, deux chaînes de production et distribution de froid, etc.\nEn d'autres termes, il faut éviter de tomber dans la surqualité. Il est plutôt conseillé d'appliquer une qualité de service en fonction des ressources et du taux de disponibilité nécessaires et suffisants.",
    "Exemple": "Malgré leurs centaines de millions d’utilisateurs, les géants du Web ne proposent pas un très haut niveau de disponibilité de type Tier IV. Les données sont redondées sur au moins un autre serveur dans un autre centre de données. Si un serveur tombe en panne, l’utilisateur est routé automatiquement vers le serveur de backup. Cette action peut prendre quelques secondes, ce qui est tout à fait acceptable et presque imperceptible pour l’utilisateur final.",
    "Principe de validation": {
      "Le nombre ...": "d'augmentations du niveau de disponibilité alors que le niveau actuel est suffisant",
      "est inférieur ou égal à": "0"
    },
    "source": "cnumr"
  },
  {
    "title": "Optimiser le parcours utilisateur",
    "Identifiants": {
      "GreenIT": "111",
      "V2": "3",
      "V3": "3",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "2. Conception",
      "Tiers": "Utilisateur/Terminal",
      "Responsable": "UX/UI Designer"
    },
    "Indications": {
      "Degré de priorité": "5",
      "Mise en oeuvre": "4",
      "Impact écologique": "5",
      "Ressources Economisées": "Processeur / Mémoire vive / Stockage / Réseau / Requêtes"
    },
    "Description": "Optimiser le parcours utilisateur consiste à diminuer le temps passé par l'utilisateur sur ses usages les plus fréquents. Dans un premier temps, cibler les parcours les plus fréquents puis optimiser leur usage : diminuer le nombre d'étapes, diminuer le nombre d'actions, supprimer l'inutile, identifier les cas d'échecs, optimiser les temps de réponse... Un parcours est bien conçu lorsque le programme se comporte exactement comme l'utilisateur l'avait imaginé.\n\nA minima, sonder en observant son entourage utilisant le service est un bon moyen d’identifier les points de friction - situations ou interactions qui contribuent à dégrader l’expérience utilisateur et à ralentir le parcours - des utilisateurs. Les tests utilisateurs permettent d'aller plus en profondeur dans la recherche de ces points de friction.\n\nLe temps passé par l'utilisateur sur son terminal est le deuxième post en termes d'impacts environnementaux.",
    "Exemple": [
      "Proposer, pour un site de grande distribution, une nouvelle commande sur la base du contenu de la précédente.",
      "Acheter sans inscription sur un site d'e-commerce.",
      "Copier/Coller son RIB directement plutôt que le télécharger puis le transférer.",
      "Mettre en avant les champs ou les filtres les plus utilisés."
    ],
    "Principe de validation": {
      "Le nombre de": "points de friction",
      "est inférieur à ou égal à": "0"
    },
    "source": "cnumr"
  },
  {
    "title": "N'utilisez que les portions indispensables des librairies JavaScript et frameworks CSS",
    "Identifiants": {
      "GreenIT": "811",
      "V2": "77",
      "V3": "40",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "2. Conception",
      "Tiers": "Réseau",
      "Responsable": "Architecte Logiciel/Développeur"
    },
    "Indications": {
      "Degré de priorité": "4",
      "Mise en oeuvre": "4",
      "Impact écologique": "4",
      "Ressources Economisées": "Processeur / Mémoire vive / Réseau"
    },
    "Description": "Les bibliothèques JavaScript telles que jQuery et les frameworks CSS prêts à l’emploi (Bootstrap, skeleton, gumby, foundation…)\nsont d’excellents outils pour réaliser rapidement des sites, car ils répondent à presque tous les besoins les plus courants. \nRevers de la médaille, on n’en utilise généralement qu’une petite portion ; or ces frameworks et bibliothèques ne s’appuient pas tous sur une architecture modulaire, \nce qui contraint l’internaute à télécharger toute la librairie pour n’utiliser qu’un faible pourcentage de ses fonctionnalités.\n\nDans la mesure du possible, il est préférable de se passer de ces bibliothèques (voir https://youmightnotneedjquery.com)\nou de n’en conserver que les portions réellement utilisées (voir https://getbootstrap.com/customize).\n\nUtiliser un bundler (ex: Webpack) permet de faire facilement du tree shaking, soit d'éliminer du code \"mort\" donc non utilisé.",
    "Exemple": "![img_1.png](img_1.png)\n\nCertains frameworks, ici Bootstrap, permettent de créer des bibliothèques sur mesure qui ne contenant que les portions réellement\nutilisées par le site, ce qui réduit le poids des bibliothèques et les ressources consommées lors de l’exécution.",
    "Principe de validation": {
      "Le nombre ...": "de librairies dont des portions non indispensables sont utilisées",
      "est inférieur ou égal à": "1"
    },
    "source": "cnumr"
  },
  {
    "title": "Apache Vhost : désactiver le AllowOverride",
    "Identifiants": {
      "GreenIT": "81",
      "V2": "101",
      "V3": "105",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "4. Production",
      "Tiers": "Datacenter",
      "Responsable": "Administrateur systèmes"
    },
    "Indications": {
      "Degré de priorité": "2",
      "Mise en oeuvre": "2",
      "Impact écologique": "3",
      "Ressources Economisées": "Processeur"
    },
    "Description": "Lorsque la directive `AllowOverride` est activée, le serveur HTTP Apache doit remonter toute la hiérarchie des répertoires pour,\npeut-être, y trouver un fichier .htaccess contenant des règles de surcharge. \nC’est pourquoi il est conseillé de désactiver si possible cette directive dans la configuration d’Apache.",
    "Exemple": "Dans le fichier de configuration de votre hôte Apache, ajouter :\n\n```\nAllowOverride none\n```\n\nPour aller plus loin :\nhttps://httpd.apache.org/docs/2.0/mod/core.html#allowoverride",
    "Principe de validation": {
      "Le nombre ...": "de fichiers de configuration contenant le texte \"AllowOverride\" avec autre chose que \"AllowOverride None\"",
      "est inférieur ou égal à": "0"
    },
    "source": "cnumr"
  },
  {
    "title": "Adapter les textes au web",
    "Identifiants": {
      "GreenIT": "100",
      "V2": "114",
      "V3": "113",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "5. Utilisation",
      "Tiers": "Utilisateur/Terminal",
      "Responsable": "Utilisateur"
    },
    "Indications": {
      "Degré de priorité": "3",
      "Mise en oeuvre": "3",
      "Impact écologique": "3",
      "Ressources Economisées": "Mémoire vive / Réseau"
    },
    "Description": "Ecrire des textes courts à l’aide d’un style direct. Favoriser la concision des idées exprimées, quitte à développer le propos sur plusieurs pages si le contenu est très long et/ou intègre beaucoup de notions différentes.\n\nDécouper en plusieurs pages les contenus d’une longueur conséquente.",
    "Exemple": "Si un sujet nécessite une longue explication, le découper en plusieurs pages et/ou le traiter dans un document à télécharger.\nAinsi, les utilisateurs n’afficheront que les pages qu’ils souhaitent lire et ne téléchargeront que les fichiers qui les intéressent.",
    "Principe de validation": {
      "Le nombre ...": "de textes affichées sur le site web et ayant une note issue de l'indice de lisibilité Flesch-Kincaid inférieur à 60",
      "est inférieur ou égal à": "0"
    },
    "source": "cnumr"
  },
  {
    "title": "Éliminer les fonctionnalités non essentielles",
    "Identifiants": {
      "GreenIT": "109",
      "V2": "1",
      "V3": "1",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "1. Spécification",
      "Tiers": "Utilisateur/Terminal",
      "Responsable": "PO/AMOA"
    },
    "Indications": {
      "Degré de priorité": "5",
      "Mise en oeuvre": "4",
      "Impact écologique": "5",
      "Ressources Economisées": "Processeur / Mémoire vive / Stockage / Réseau / Requêtes"
    },
    "Description": "Plusieurs études (Cast Software et Standish Group, notamment) démontrent que 70 % des fonctionnalités demandées par les utilisateurs ne sont pas essentielles et que 45 % ne sont jamais utilisées. En réduisant la couverture et la profondeur fonctionnelle de l’application, on abaisse son coût de développement initial, sa dette technique et les impacts environnementaux associés. \n\nOn diminue ainsi mécaniquement l’infrastructure nécessaire à son exécution. Par ailleurs, à niveau ergonomique constant, plus l’application est pauvre fonctionnellement, plus elle sera simple à utiliser. Il faut donc réduire le plus possible la couverture fonctionnelle de l’application, en la centrant sur le besoin essentiel de l’utilisateur.\n\nDétecter une fonctionnalité non essentielle est possible au moment de l'analyse de l'expression du besoin. La méthode MoSCoW, des ateliers, des wireframes (maquettes fonctionnelles) ou des prototypes avec tests utilisateurs permettent de vérifier l'utilité d’une fonctionnalité en amont de son développement. ",
    "Exemple": "Les succès récents du Web – Google, Twitter, WhatsApp, Pinterest, Instagram, etc. – fournissent un seul service et misent sur une grande sobriété fonctionnelle.\n\nSe poser, au moment de l'analyse de l'expression du besoin, la question : « Que se passe-t-il si on ne l’a pas ? ».\n\nRespecter le principe YAGNI (You Ain't Gonna Need It) de l’extreme programming : développez quand vous avez effectivement besoin d’une fonctionnalité, pas lorsque vous imaginez en avoir besoin.",
    "Principe de validation": {
      "Le nombre ...": "de fonctionnalités dont l'utilité n'a pas été vérifiée avec un panel d'utilisateurs avant développement",
      "est inférieur ou égal à": "0 %"
    },
    "source": "cnumr"
  },
  {
    "title": "Minifier les fichiers CSS, JavaScript, HTML et SVG",
    "Identifiants": {
      "GreenIT": "12",
      "V2": "78",
      "V3": "77",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "4. Production",
      "Tiers": "Réseau",
      "Responsable": "Architecte Logiciel/Développeur"
    },
    "Indications": {
      "Degré de priorité": "4",
      "Mise en oeuvre": "3",
      "Impact écologique": "4",
      "Ressources Economisées": "Réseau"
    },
    "Description": "Utiliser un outil de minification CSS, Javascript, HTML et SVG permet de supprimer les espaces inutiles, les commentaires des développeurs, les sauts de ligne, les délimiteurs de blocs et ainsi réduire leur taille.",
    "Exemple": "Il existe différents outils pour minifier comme par exemple:\n\n['CSS: cssnano, csso ou clean-css ', 'Javascript: Terser, UglifyJS ou Babel-minify ', 'HTML: htmlnano, HTMLMinifier', 'SVG: SVGO, minify-xml ou équivalent']",
    "Principe de validation": {
      "Le nombre ...": "de fichiers CSS, JavaScript, HTML et SVG non minifiés",
      "est inférieur ou égal à": "0"
    },
    "source": "cnumr"
  },
  {
    "title": "Mettre en cache les objets souvent accédés en JavaScript",
    "Identifiants": {
      "GreenIT": "33",
      "V2": "36",
      "V3": "49",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "3. Réalisation (fabrication / développement)",
      "Tiers": "Réseau",
      "Responsable": "Architecte Logiciel/Développeur"
    },
    "Indications": {
      "Degré de priorité": "4",
      "Mise en oeuvre": "3",
      "Impact écologique": "4",
      "Ressources Economisées": "Processeur"
    },
    "Description": "L’accès au DOM (Document Object Model) est coûteux en termes de ressources processeur (cycles CPU). Aussi, lorsque vous utilisez plusieurs fois le même élément du DOM depuis JavaScript, stockez sa référence dans une variable afin de ne pas parcourir à nouveau le DOM pour ce même élément.",
    "Exemple": "Ne pas écrire :\n\n```\ndocument.getElementById('menu').property1 = 'foo'; document.getElementById('menu').property2 = 'bar';\n```\n\nmais plutôt :\n\n```\nvar mmenu = document.getElementById('menu');\nmenu.property1 = 'foo';\nmenu.property2 = 'bar'\n```",
    "Principe de validation": {
      "Le nombre ...": "de données constantes (ou non volatiles) récupérés à plusieurs reprises sans être mises en cache",
      "est inférieur ou égal à": "0"
    },
    "source": "cnumr"
  },
  {
    "title": "Eviter d'utiliser des images matricielles pour l'interface",
    "Identifiants": {
      "GreenIT": "161",
      "V2": "21",
      "V3": "35",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "5. Utilisation",
      "Tiers": "Utilisateur/Terminal",
      "Responsable": "Utilisateur"
    },
    "Indications": {
      "Degré de priorité": "4",
      "Mise en oeuvre": "4",
      "Impact écologique": "4",
      "Ressources Economisées": "Réseau"
    },
    "Description": "Choisir le bon format d’image est crucial pour éviter de transporter des octets inutilement et économiser ainsi de la bande passante. \nPar ailleurs, avec la multiplication des terminaux, des tailles d’écran et l’augmentation de leur résolution, une approche vectorielle\ndoit être privilégiée par rapport à des images matricielles.\nGrâce à cette bonne pratique, l’interface est indépendante de la résolution de l’écran. On limite donc aussi la dette technique.\nLa première règle consiste à remplacer les images matricielles (GIF, PNG, JPEG, WebP, etc.) par des styles (CSS), des pictos,\ndes glyphes ou des icônes fournis par une webfont ou une police standard. L’internaute n’a ainsi aucune ressource supplémentaire à télécharger.\nS’il n’est pas possible d’utiliser des CSS ou une police standard (déjà installée sur le terminal de l’internaute), vous pouvez aussi :\n\n['employer une webfont ;', 'recourir à une image vectorielle au format standard SVG.']",
    "Exemple": "![img.png](img.png)\n\nCette image de 198 × 198 pixels pèse : \n\n['118 Ko dans un format matriciel non compressé ;', '6,5 Ko en JPEG (compression à 90 %) ;', '3,8 Ko en PNG ;', '0,7 Ko en SVG minifié.']\n\nLe format vectoriel est, dans ce cas précis, 5 à 10 fois moins lourd qu’un format matriciel tout en pouvant être retaillé à l’infini.",
    "Principe de validation": {
      "Le nombre ...": "d'images matricielles pour l'URL testée",
      "est inférieur ou égal à": "5"
    },
    "source": "cnumr"
  },
  {
    "title": "Externaliser les CSS et JavaScript",
    "Identifiants": {
      "GreenIT": "7",
      "V2": "16",
      "V3": "32",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "3. Réalisation (fabrication / développement)",
      "Tiers": "Réseau",
      "Responsable": "Architecte Logiciel/Développeur"
    },
    "Indications": {
      "Degré de priorité": "4",
      "Mise en oeuvre": "4",
      "Impact écologique": "4",
      "Ressources Economisées": "Réseau"
    },
    "Description": "Veiller à ce que les codes CSS et JavaScript ne soient pas embarqués dans le code HTML de la page, à l’exception d’éventuelles\nvariables de configuration pour les objets JavaScript.\n\nEn effet, si vous incluez du code CSS ou JavaScript dans le corps du fichier HTML, alors que ce dernier est utilisé par plusieurs pages\n(voire tout le site), ce code doit être transféré pour chaque page demandée par l’ internaute, ce qui augmente le volume de données transmises.\nEn revanche, si les codes CSS et JavaScript sont inclus dans leurs propres fichiers, \nle navigateur peut les stocker dans son système de cache local afin de ne pas les redemander.",
    "Exemple": "Dans le code HTML, ne pas écrire :\n\n```\n<style type=\"text/css\" media=\"screen\">\n    p { color: #333; margin: 2px 0 }\n    /* Toutes les déclarations CSS du site */\n</style>\n```\n\nmais plutôt :\n\n```\n<link href=\"css/styles.css\" rel=\"stylesheet\">\n```",
    "Principe de validation": {
      "Le nombre ...": "d'URL intégrant une quantité et / ou un nombre significatif de code CSS / Javascript (inline)",
      "est inférieur ou égal à": "2"
    },
    "source": "cnumr"
  },
  {
    "title": "Créer une architecture applicative modulaire",
    "Identifiants": {
      "GreenIT": "114",
      "V2": "52",
      "V3": "14",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "2. Conception",
      "Tiers": "Datacenter",
      "Responsable": "Architecte Logiciel/Développeur"
    },
    "Indications": {
      "Degré de priorité": "3",
      "Mise en oeuvre": "3",
      "Impact écologique": "3",
      "Ressources Economisées": "Processeur / Mémoire vive / Stockage"
    },
    "Description": "L’architecture modulaire popularisée par les logiciels open source apporte souvent une plus grande capacité à monter en charge,\ndes coûts réduits de maintenance corrective et évolutive, ainsi qu’un code plus efficient.\nSi la couverture fonctionnelle du site web ou du service en ligne peut être amenée à évoluer, mieux vaut implémenter les fonctionnalités de base dans un noyau et les compléter au besoin par des modules. Ces modules peuvent rassembler des fonctions appartenant à un même domaine métier. Cela permet de les développer indépendamment des autres domaines métier ainsi que les partager à d'autres applications.\n\nCette approche est valable à tous les niveaux de granularité, pour un développement sur mesure comme pour le choix d’un serveur HTTP ou d’un CMS.",
    "Exemple": "Les logiciels open source les plus efficients, comme NGINX, Apache, MySQL ou PHP, reposent sur cette architecture modulaire.\n\nCôté backend, le découpage en microservices permet d'apporter un niveau de modularité pour des services HTTP. Il faudra néanmoins porter une attention particulière sur la granularité du découpage pour éviter un effet contre-productif (ajout d'une complexité d'interfaçage entre les services, augmentation globale des ressources informatiques).",
    "Principe de validation": {
      "Le nombre ...": "Le nombre d'architectures non modulaires",
      "est inférieur ou égal à": "0"
    },
    "source": "cnumr"
  },
  {
    "title": "Mettre les caches entièrement en RAM (opcode et kvs)",
    "Identifiants": {
      "GreenIT": "85",
      "V2": "90",
      "V3": "92",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "4. Production",
      "Tiers": "Datacenter",
      "Responsable": "Administrateur systèmes"
    },
    "Indications": {
      "Degré de priorité": "2",
      "Mise en oeuvre": "2",
      "Impact écologique": "3",
      "Ressources Economisées": "Processeur / Stockage"
    },
    "Description": "Les systèmes de cache doivent être, autant que possible, montés entièrement en mémoire vive (RAM). Cette mesure permet d’éviter des entrées/sorties sur les disques durs, ainsi que des cycles CPU pour les gérer.\n\nL’objectif est double : servir rapidement une réponse au client, et limiter le nombre de composants matériels (et logiciels) impliqués dans la réponse retournée par le serveur.\n\nLa mémoire vive étant très rapide en termes d’accès en lecture/écriture, la durée de consommation des ressources est particulièrement courte. En outre, la durée de vie des composants est allongée avec cette bonne pratique, puisqu’il n’y pas de mouvement mécanique comme lors d’un recours au disque dur.",
    "Exemple": "Exemples d’intégration d’un cache RAM à Drupal :\n\n['intégration de Memcache : https://drupal.org/project/memcache', 'intégration de Varnish : https://drupal.org/project/varnish']",
    "Principe de validation": {
      "Le nombre ...": "de caches non mis en RAM",
      "est inférieur ou égal à": "0"
    },
    "source": "cnumr"
  },
  {
    "title": "Ne pas faire de modification du DOM lorsqu’on le traverse",
    "Identifiants": {
      "GreenIT": "43",
      "V2": "43",
      "V3": "41",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "3. Réalisation (fabrication / développement)",
      "Tiers": "Utilisateur/Terminal",
      "Responsable": "Architecte Logiciel/Développeur"
    },
    "Indications": {
      "Degré de priorité": "4",
      "Mise en oeuvre": "4",
      "Impact écologique": "4",
      "Ressources Economisées": "Processeur"
    },
    "Description": "Modifier le DOM (Document Object Model) lorsqu’on le traverse peut engendrer des situations où la boucle devient très gourmande\nen ressources, notamment en cycles CPU. En effet, si on y ajoute des éléments en le traversant, il est possible de générer une boucle infinie qui consommera une grande quantité de ressources. Ce genre de modification est donc fortement déconseillée.",
    "Exemple": "Éviter :\n\n```\n<script>\n    // Notation jQuery\n    $('a.extlink').each(function(el) {\n        $(el).attr('rel','external nofollow');\n    });\n</script>\n```",
    "Principe de validation": {
      "Le nombre ...": "d'insertions dans le DOM réalisées lorsque cette même partie du DOM est traversée par un code JavaScript",
      "est inférieur ou égal à": "0"
    },
    "source": "cnumr"
  },
  {
    "title": "Choisir un format de données adapté",
    "Identifiants": {
      "GreenIT": "113",
      "V2": "54",
      "V3": "17",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "3. Réalisation (fabrication / développement)",
      "Tiers": "Datacenter",
      "Responsable": "Architecte Logiciel/Développeur"
    },
    "Indications": {
      "Degré de priorité": "4",
      "Mise en oeuvre": "3",
      "Impact écologique": "4",
      "Ressources Economisées": "Processeur / Mémoire vive / Stockage / Réseau"
    },
    "Description": "Le type de données utilisé pour manipuler et stocker une donnée a un impact significatif sur la consommation mémoire et\nles cycles processeurs nécessaires lors des manipulations en base de données, au niveau du serveur d’applications et même\ndans le navigateur (manipulation via JavaScript), ainsi que sur l’espace de stockage nécessaire. Choisir un mauvais type de données entraîne :\n\n['un gaspillage de mémoire (par exemple, si vous stockez de toutes\\npetites données dans une colonne prévue pour stocker de grosses quantités de données) ;', 'des problèmes de performance (il sera plus rapide de faire une\\nrecherche sur un nombre que sur une chaîne de caractères).']\n\nIdéalement, les choix du type de données et de son dimensionnement doivent êtres fondés sur l’analyse d’un échantillon représentatif de données.",
    "Exemples": "Dans le cas d’un établissement de formation, la taille du champ permettant de stocker le nombre d’élèves doit être basé sur une étude statistique.\nOn peut ainsi déterminer s’il est possible d’utiliser un TINYINT (1 octet, jusqu’à 127) plutôt qu’un SMALLINT (2 octets, jusqu’à 32 767). \nDans tous les cas, le choix par défaut d’un INT (4 octets, jusqu’à 2 147 483 647) voire un BIGINT (8 octets) est une aberration (que nous rencontrons malheureusement tous les jours lors de nos audits…).\nGain potentiel : jusqu’à 8 fois moins de stockage. La consommation en cycle processeur est réduite dans les mêmes proportions.\n\nDans le cas d'un stockage d'un identifiant UUID, un stockage textuel sera non adapté. Un UUID est stocké sur 16 octets alors que sous sa forme textuelle cela demanderait au minimum 36 octets. Les indexes de base de données ne seraient également pas aussi efficaces qu'avec le type UUID/GUID/uniqueidentifier.",
    "Principe de validation": {
      "Le nombre ...": "de champs de la base dont le format est inadapté est",
      "est inférieur ou égal à": "15%"
    },
    "source": "cnumr"
  },
  {
    "title": "N'utiliser que des fichiers double opt-in",
    "Identifiants": {
      "GreenIT": "103",
      "V2": "111",
      "V3": "110",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "2. Conception",
      "Tiers": "Utilisateur/Terminal",
      "Responsable": "PO/AMOA"
    },
    "Indications": {
      "Degré de priorité": "2",
      "Mise en oeuvre": "3",
      "Impact écologique": "2",
      "Ressources Economisées": "Processeur / Réseau / Requêtes"
    },
    "Description": "Le double opt-in est une pratique marketing consistant à demander le consentement du prospect, généralement par accord électronique en cochant une case, puis à faire valider ce consentement par l’envoi d’un e-mail de confirmation à l’adresse indiquée. L’état de l’adresse devient double opt-in lorsque le destinataire a cliqué sur un lien contenu dans le message reçu. Ce procédé permet de valider l’adresse et de vérifier que la personne qui l’a fournie en est bien propriétaire. Cette double vérification confirme ainsi l’engagement du prospect pour recevoir une newsletter, souscrire à un abonnement, etc.\n\nIl est donc recommandé d’utiliser la pratique du double opt-in pour réduire significativement :\n\n['le nombre d’e-mails sans véritable impact (et donc la bande passante consommée) ;', 'la charge du serveur SMTP lors de l’envoi de l’e-mailing ;', 'la charge du serveur lors du traitement des désabonnements.']",
    "Exemple": "Dans le cas d’un opérateur téléphonique ou d’une banque, laisser aux clients le choix parmi un catalogue de produits ou de services pour lesquels ils acceptent d’être sollicités.",
    "Principe de validation": {
      "Le nombre ...": "de fichiers de contacts en opt-out",
      "est inférieur ou égal à": "0"
    },
    "source": "cnumr"
  },
  {
    "title": "Mettre en place un sitemap efficient",
    "Identifiants": {
      "GreenIT": "",
      "V2": "",
      "V3": "",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "4. Production",
      "Tiers": "Utilisateur/Terminal",
      "Responsable": "Référenceur (SEO)"
    },
    "Indications": {
      "Degré de priorité": "2",
      "Mise en oeuvre": "3",
      "Impact écologique": "2",
      "Ressources Economisées": "Réseau / Requêtes"
    },
    "Description": "Le sitemap (plan du site) permet de faciliter l'indexation des pages et des contenus d'un site web par les moteurs de recherche. \nUn sitemap non mis à jour peut contenir des urls qui n'ont plus raison d'y être car elles font référence à des pages ou des contenus peu visités et peu utiles.\nUne telle situation augmente le risque d'avoir des internautes qui arrivent sur des pages sans intérêt via les moteurs de recherche ou même des pages orphelines.\nAinsi, l'internaute risque de solliciter des ressources informatiques pour rien.",
    "Principe de validation": {
      "Le nombre ...": "de pages orphelines dans le sitemap",
      "est inférieur ou égal à": "0"
    },
    "source": "cnumr"
  },
  {
    "title": "Assurer la compatibilité avec les plus anciens appareils et logiciels du parc",
    "Identifiants": {
      "GreenIT": "",
      "V2": "",
      "V3": "",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "3. Réalisation (fabrication / développement)",
      "Tiers": "Utilisateur/Terminal",
      "Responsable": "PO/AMOA"
    },
    "Indications": {
      "Degré de priorité": "4",
      "Mise en oeuvre": "3",
      "Impact écologique": "5",
      "Ressources Economisées": "Déchets électroniques"
    },
    "Description": "Il faut s'assurer de la compatibilité du site avec les plus anciens matériels et logiciels que les utilisateurs peuvent possèder.\nLes pages doivent être utilisables sur les configurations les plus contraignantes : pas de mises en page cassées, de boutons inactifs,\nd'erreurs affichées ou autre problème empêchant la lecture ou la navigation.\n\nLes configurations les plus contraignantes à choisir comprennnent : \n\n['Les versions de navigateurs les plus anciennes, ou qui posent le plus de problèmes de compatibilités', \"Les versions d'OS les plus anciennes\", 'Les terminaux les moins puissants que les utilisateurs possèdent : smartphones, ordinateurs ou autres.']\n\nLe choix des configurations va dépendre de l'état du web au moment de l'implémentation de la solution, ainsi que du contexte \nprojet : des publics différents amèneront des contraintes différentes. \n\nCe choix peut être déterminé en partie grâce aux statistiques de fréquentations si elles sont disponibles. Attention cependant au biais du \nsurvivant : les utilisateurs qui ne peuvent pas du tout utiliser le site n'apparaitront pas dans ces statistiques. Le mieux\nest de faire une étude sur le terrain des utilisateurs et de leurs équipements.",
    "Exemple": "Pour différentes raisons (machines trop anciennes pour être mise à jour, manque d'un accès administrateur au système ou \nméconnaissance de l'existence d'alternatives), des utilisateurs sont bloqués sur Internet Explorer.\nUn site développé pour des navigateurs modernes, utilisant par exemple massivement _flexbox_ ou _css grid_ ne s'affichera \npas correctement sur ce navigateur.",
    "Principe de validation": {
      "Le nombre ...": "de pages non testées sur les configurations les plus contraignantes du contexte projet",
      "est égal à": "0"
    },
    "source": "cnumr"
  },
  {
    "title": "Ne pas redimensionner les images coté navigateur",
    "Identifiants": {
      "GreenIT": "93",
      "V2": "20",
      "V3": "34",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "3. Réalisation (fabrication / développement)",
      "Tiers": "Utilisateur/Terminal",
      "Responsable": "Utilisateur"
    },
    "Indications": {
      "Degré de priorité": "4",
      "Mise en oeuvre": "4",
      "Impact écologique": "4",
      "Ressources Economisées": "Processeur / Réseau"
    },
    "Description": "Ne pas redimensionner les images en utilisant les attributs HEIGHT et WIDTH du code HTML. Cette approche impose en effet de transférer ces images dans leur taille originale, gaspillant ainsi de la bande passante et des cycles CPU.",
    "Exemple": "Une image de 350 × 300 pixels encodée en PNG 24 pèse 41 Ko. Redimensionnée dans le code HTML, la même image affichée en vignette à 70 × 60 pixels pèse toujours 41 Ko, alors qu’elle ne devrait pas dépasser 3 Ko ! Soit 38 Ko téléchargés à chaque fois pour rien… NB : le redimensionnement étant fait par le navigateur peut aussi avoir un effet pixel sur le rendu final.\n\nLa meilleure solution consiste à générer les images à la taille à laquelle elles sont affichées. Soit vous le faites manuellement en utilisant un éditeur d'image, soit le CMS dispose d'une routine automatique qui va générer les images à la taille où elles sont appelées dans le template.",
    "Principe de validation": {
      "Le nombre ...": "d'images redimensionnées dans le navigateur",
      "est inférieur ou égal à": "0"
    },
    "source": "cnumr"
  },
  {
    "title": "Installer le minimum requis sur le serveur",
    "Identifiants": {
      "GreenIT": "74",
      "V2": "89",
      "V3": "91",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "4. Production",
      "Tiers": "Datacenter",
      "Responsable": "Administrateur systèmes"
    },
    "Indications": {
      "Degré de priorité": "3",
      "Mise en oeuvre": "4",
      "Impact écologique": "3",
      "Ressources Economisées": "Processeur / Mémoire vive / Stockage"
    },
    "Description": "Désinstaller tous les services qui ne sont pas indispensables au bon fonctionnement du site. Cette mesure supprimera nécessairement des daemons (agents et services fonctionnant en permanence en mémoire), qui sont consommateurs de ressources, notamment en cycles CPU et en mémoire vive.",
    "Exemple": "Privilégier une installation « manuelle » du serveur (LAMP + CMS, par exemple) plutôt qu’une distribution avec une surcouche de type cPanel ou Plesk. Et si une surcouche d’administration est nécessaire, préférer des solutions légères comme Webmin.",
    "Principe de validation": {
      "Le nombre ...": "de services non nécessaires au fonctionnement du site exécutés sur le système d'exploitation",
      "est inférieur ou égal à": "0"
    },
    "source": "cnumr"
  },
  {
    "title": "Bien choisir son thème et limiter le nombre d'extensions dans un CMS",
    "Identifiants": {
      "GreenIT": "",
      "V2": "",
      "V3": "",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "3. Réalisation (fabrication / développement)",
      "Tiers": "Réseau",
      "Responsable": "Développeur"
    },
    "Indications": {
      "Degré de priorité": "2",
      "Mise en oeuvre": "2",
      "Impact écologique": "3",
      "Ressources Economisées": "Réseau / Stockage"
    },
    "Description": "Lors de l'utilisation d'un CMS, le choix du thème est primordial.\nA l'installation de votre thème, celui ci ajoute des extensions et parfois intègre un constructeur de pages.\nLes fonctionnalités fournies sont souvent bien au delà de vos réels besoins.\nChaque extension ajoute ses données en base de données, ses fichiers css et js, sans compter le nombre de fichiers stockés sur votre serveur pour faire fonctionner le tout. Selon la qualité de développement, les assets supplémentaires peuvent être lourds et/ou redondants.\n\nCela provoque une :\n\n['augmentation du nombre de requêtes', 'augmentation du poids des pages', 'augmentation du temps de traitement des requêtes internes', \"complexification de l'administration de vos contenus\"]",
    "Exemple": "Un thème tout en un ou qui intègre un constructeur de pages peut ajouter une fonctionnalité pour mettre des sliders dans vos articles ou encore ultra personnaliser vos boutons d'actions, ou vous permet d'intégrer des témoignages ou de créer un portfolio alors que vous n'avez pas du tout prévu d'en intégrer dans vos contenus.\nAttention également aux incompatibilités de certaines extensions.\n\nPréférez un thème simple où se trouve l'essentiel, puis ajoutez une fonctionnalité réfléchie lorsqu'elle est nécéssaire.",
    "Principe de validation": {
      "Le nombre de ...": "extensions",
      "est inférieur ou égal à": "12"
    },
    "source": "cnumr"
  },
  {
    "title": "Optimiser les images vectorielles",
    "Identifiants": {
      "GreenIT": "1050",
      "V2": "22",
      "V3": "36",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "5. Utilisation",
      "Tiers": "Utilisateur/Terminal",
      "Responsable": "Utilisateur"
    },
    "Indications": {
      "Degré de priorité": "4",
      "Mise en oeuvre": "4",
      "Impact écologique": "4",
      "Ressources Economisées": "Réseau"
    },
    "Description": "Les navigateurs modernes sont tous compatibles avec le format d’image vectorielle SVG (Scalable Vector Graphics), \nbasé sur un ensemble de vecteurs décrits en XML. Les images SVG ont deux avantages indéniables : d’une part, \nelles peuvent être réduites et agrandies à l’infini sans dégradation de qualité ; d’autre part, elles sont,\nla plupart du temps, moins lourdes que des images bitmap.\n\nCependant, la plupart des images SVG contiennent de nombreuses métadonnées qui ont été nécessaires à leur création. \nC’est par exemple le cas des informations de couche (layer), des commentaires, etc., qui sont indispensables pour éditer l’image,\nmais inutiles pour l’afficher. D’où l’idée de les supprimer pour réduire le poids des fichiers.\nDe nombreux outils de minification et d’optimisation, tels que Compressor.io, SVG Cleaner, ou SVGO sont disponibles.\n\nLe taux de compression via gzip varie selon la complexité de l’image. Mais il est toujours élevé, car il s’agit de compresser du texte :\nen général, on atteint des ratios de l’ordre de 75 % à 80 %.",
    "Exemple": "Gain potentiel : jusqu’à 75 % de Ko en moins.\n\nNous avons testé SVGO sur un fichier SVG de 1 Ko. Il a réduit sa taille de 36 %, le faisant passer de 1101 à 700 octets. En compressant le fichier via gzip avant son transfert, le poids passe à 498 octets, soit moins de la moitié (45 %) de la taille initiale, sans aucune perte de qualité à l’affichage.",
    "Principe de validation": {
      "Le nombre ...": "d'images non optimisées",
      "est inférieur ou égal à": "0%"
    },
    "source": "cnumr"
  },
  {
    "title": "Utiliser le rechargement partiel d'une zone de contenu",
    "Identifiants": {
      "GreenIT": "40",
      "V2": "49",
      "V3": "38",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "3. Réalisation (fabrication / développement)",
      "Tiers": "Réseau",
      "Responsable": "UX/UI Designer"
    },
    "Indications": {
      "Degré de priorité": "4",
      "Mise en oeuvre": "3",
      "Impact écologique": "4",
      "Ressources Economisées": "Processeur / Mémoire vive / Réseau"
    },
    "Description": "Si votre page web comporte une ou plusieurs zones de contenus qui nécessitent un taux de rafraîchissement élevé, alors nous vous conseillons de procéder à un rechargement uniquement de celles-ci et non pas de toute la page.\nPour cela vous pouvez utiliser plusieurs techniques généralement Javascript couramment appelées AJAX mais qui peuvent aussi utilisées un Service Worker, un Web Component ou un développement sur mesure.\n\nIl est même envisageable de ne pas inclure ces parties dans l'appel HTTP de la page pour l'hydrater avec ces zones dynamiques en Javascript, ce que certains appellent \"component islands\" ou \"islands architecture\". L'intérêt étant de pouvoir conserver une solution de cache pour la page \"container\" et de ne recharger que les \"ilots\" de contenu qui le nécessitent.",
    "Exemple": "Les sites d’actualité utilisent très souvent ce procédé, qui permet d’identifier clairement les zones qui nécessitent \nd’être mises à jour rapidement (flash d’informations, données météo, cours de la Bourse, résultats sportifs, etc.).",
    "Principe de validation": {
      "Le nombre ...": "de zones de contenu pouvant être mis à jour partiellement mais qui ne le sont pas",
      "est inférieur ou égal à": "0%"
    },
    "source": "cnumr"
  },
  {
    "title": "Valider les pages auprès du W3C",
    "Identifiants": {
      "GreenIT": "8",
      "V2": "15",
      "V3": "31",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "3. Réalisation (fabrication / développement)",
      "Tiers": "Utilisateur/Terminal",
      "Responsable": "Architecte Logiciel/Développeur"
    },
    "Indications": {
      "Degré de priorité": "3",
      "Mise en oeuvre": "5",
      "Impact écologique": "2",
      "Ressources Economisées": "Processeur"
    },
    "Description": "Vérifier que le code HTML des pages est bien formé. Dans le cas contraire, le navigateur corrigera dynamiquement un certain nombre d’éléments pour afficher au mieux les pages posant problème.\nCes corrections dynamiques consomment inutilement des ressources à chaque chargement des pages concernées.",
    "Exemple": "Utiliser le validateur du W3C (World Wide Web Consortium) pour vérifier que les pages sont bien valides et que le code HTML est correctement formé :\nhttps://validator.w3.org",
    "Principe de validation": {
      "Le nombre ...": "d'erreurs critiques",
      "est inférieur ou égal à": "0"
    },
    "source": "cnumr"
  },
  {
    "title": "Utiliser les compartiments CSS",
    "Identifiants": {
      "GreenIT": "",
      "V2": "",
      "V3": "",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "3. Réalisation (fabrication / développement)",
      "Tiers": "Utilisateur/Terminal",
      "Responsable": "Architecte Logiciel/Développeur"
    },
    "Indications": {
      "Degré de priorité": "3",
      "Mise en oeuvre": "2",
      "Impact écologique": "4",
      "Ressources Economisées": "Processeur"
    },
    "Description": "Le CSS Containment (ou compartimentation CSS) indique qu'un nœud et son contenu sont, autant que possible, indépendants du reste de l'arborescence de la page.\n\nEn fonction du type d'indépendance (```strict```, ```content```, ```size```, ```layout```, ```style``` et/ou ```paint```) de la propriété ```contain```, le navigateur :\n\n[\"recalcule le rendu (les positions, la mise en forme, les dispositions et/ou l'affichage) pour le seul nœud indépendant économisant ainsi, de recalculer l’entièreté du DOM de la page\", 'ne fait pas le rendu du contenu des nœuds indépendants hors zone visible']",
    "Exemples": [
      "Une architecture DOM complexe dont le contenu de noeuds est modifié à un moment donné"
    ],
    "Principe de validation": {
      "Le nombre ...": "d'éléments non isolés",
      "est inférieur ou égal à": "20%"
    },
    "source": "cnumr"
  },
  {
    "title": "Favoriser un développement sur-mesure à l'usage d'un CMS",
    "Identifiants": {
      "GreenIT": "2",
      "V2": "12",
      "V3": "11",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "2. Conception",
      "Tiers": "Datacenter",
      "Responsable": "Architecte Logiciel/Développeur"
    },
    "Indications": {
      "Degré de priorité": "3",
      "Mise en oeuvre": "3",
      "Impact écologique": "3",
      "Ressources Economisées": "Processeur / Mémoire vive / Réseau"
    },
    "Description": "Utiliser un framework ou un développement sur mesure, afin de bénéficier d’une plus grande liberté dans l’optimisation de certains processus.\nLes CMS sont en effet plus contraignants et imposent des fonctionnements parfois gourmands en ressources pour atteindre leur principal objectif, la souplesse.\n\nAinsi, pour la gestion de leurs extensions, les CMS utilisent des systèmes de « hook », qui reposent généralement sur une convention de nommage des fonctions.\nLe test de l’existence de nouvelles fonctions de ces extensions est un processus qui consomme des ressources, tandis que les développements sur mesure n’ont pas à « découvrir » l’existence de fonctions puisqu’elles sont déjà connues. L’usage d’un nombre trop important d’extensions peut consommer beaucoup de ressources et ralentir le site.",
    "Principe de validation": {
      "Le nombre ...": "d'extensions d'un site reposant sur un CMS",
      "est inférieur ou égal à": "3"
    },
    "source": "cnumr"
  },
  {
    "title": "Utiliser tous les niveaux de cache du CMS",
    "Identifiants": {
      "GreenIT": "60",
      "V2": "57",
      "V3": "57",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "4. Production",
      "Tiers": "Datacenter",
      "Responsable": "Administrateur systèmes"
    },
    "Indications": {
      "Degré de priorité": "4",
      "Mise en oeuvre": "3",
      "Impact écologique": "4",
      "Ressources Economisées": "Processeur / Mémoire vive"
    },
    "Description": "Si le CMS (comme Wordpress, Drupal, eZ Publish...) propose un système de cache à plusieurs niveaux, utiliser ces différents niveaux car leur granularité permet de réduire les ressources consommées (cycles CPU, mémoire) et d’offrir de bonnes performances à l’utilisateur.",
    "Exemple": "Un CMS comme WordPress ne dispose pas nativement de système de cache, mais il existe plusieurs plugins qui comblent cette lacune, les plus connus étant :\n\n['W3 total Cache', 'Wp Super Cache', 'Wp-rocket']\n\nDès lors avec l'un de ces plugins, les pages sont mises en cache sur le serveur et ne sont plus générées pour chaque utilisateur. Accessoirement, ce genre d'outil fournit aussi d'autres optimisations orientées WebPerf qui vont dans le sens de l'écoconception web.",
    "Principe de validation": {
      "Le nombre ...": "de cache non activé",
      "est inférieur ou égal à": "0"
    },
    "source": "cnumr"
  },
  {
    "title": "Limiter le nombre de CSS",
    "Identifiants": {
      "GreenIT": "10",
      "V2": "25",
      "V3": "22",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "3. Réalisation (fabrication / développement)",
      "Tiers": "Réseau",
      "Responsable": "Architecte Logiciel/Développeur"
    },
    "Indications": {
      "Degré de priorité": "4",
      "Mise en oeuvre": "4",
      "Impact écologique": "4",
      "Ressources Economisées": "Réseau / Requêtes"
    },
    "Description": "Limiter le nombre de CSS pour ne pas multiplier les requêtes HTTP et pour simplifier le rendu côté navigateur. Utiliser une feuille de style commune pour tous les éléments communs, quel que soit l'affichage, et un fichier par résolution cible ou media querie.\n\nAttention, intégrer ces fichiers directement dans le code HTML et NON PAS avec des directives @import dans les fichiers CSS eux-mêmes. En découpant de la sorte, le terminal de l'utilisateur choisira ce qu'il lui correspond et dépriorisera le chargement des fichiers dont il a n'a pas besoin.\n\nLe cas échéant, des fichiers CSS pour certains composants peuvent être chargés en fonction du contexte.",
    "Exemple": "```\n<link rel='stylesheet' id='css-css'  href='communs.css' type='text/css' media='all' />\n<link rel='stylesheet' id='css-xs-css'  href='petits-ecrans.css' type='text/css' media='(max-width: 959px)' />\n<link rel='stylesheet' id='css-sm-css'  href='tablettes.css' type='text/css' media='(min-width: 768px)' />\n<link rel='stylesheet' id='css-mdlg-css'  href='grands-ecrans.css' media='(min-width: 960px)' />\n<link rel='stylesheet' id='css-print-css'  href='print.css' type='text/css' media='print' />\n```",
    "Principe de validation": {
      "Le nombre ...": "de fichiers CSS",
      "est inférieur ou égal à": "10"
    },
    "source": "cnumr"
  },
  {
    "title": "Grouper les déclarations CSS similaires",
    "Identifiants": {
      "GreenIT": "14",
      "V2": "28",
      "V3": "25",
      "V4": ""
    },
    "Catégories": {
      "Cycle de vie": "3. Réalisation (fabrication / développement)",
      "Tiers": "Réseau",
      "Responsable": "Architecte Logiciel/Développeur"
    },
    "Indications": {
      "Degré de priorité": "3",
      "Mise en oeuvre": "3",
      "Impact écologique": "2",
      "Ressources Economisées": "Réseau"
    },
    "Description": "Lorsque plusieurs éléments du DOM (Document Object Model) ont des propriétés CSS communes,\nles déclarer ensemble dans la même feuille de styles. Cette méthode permet de réduire le poids de la CSS.",
    "Exemple": "Ne pas écrire :\n\n```\nh1 {\nbackground-color: gray; color: navy;\n}\n\nh2 {\nbackground-color: gray; color: navy;\n}\n\nh3 {\nbackground-color: gray; color: navy;\n}\n```\n\nmais plutôt :\n\n```\nh1, h2, h3 {\nbackground-color: gray; color: navy;\n}\n```\n\nSi vous souhaitez vous assurer que cette règle est bien respectée, vous pouvez mettre en place le module [stylelint](https://stylelint.io/) \ndans votre projet (`devDependencies`) et utiliser la règle `shorthand-property-no-redundant-values`\n\nVous trouverez la liste complète de ces propriétés raccourcies sur le site [MDN](https://developer.mozilla.org/fr/docs/Web/CSS/Propri%C3%A9t%C3%A9s_raccourcies)",
    "Principe de validation": {
      "Le nombre ...": "de déclaration CSS similaires non regroupées",
      "est inférieur ou égal à": "1"
    },
    "source": "cnumr"
  }
]